// ignore_for_file: always_specify_types
// ignore_for_file: camel_case_types
// ignore_for_file: non_constant_identifier_names

// AUTO GENERATED FILE, DO NOT EDIT.
//
// Generated by `package:ffigen`.
import 'dart:ffi' as ffi;

/// Selected bindings for `third_party/jni.h`.
/// The jni.h file is taken from Android NDK.
/// Regenerate bindings with `dart run ffigen --config ffigen.yaml`.
///
class JniHelpersBindings {
  /// Holds the symbol lookup function.
  final ffi.Pointer<T> Function<T extends ffi.NativeType>(String symbolName)
      _lookup;

  /// The symbols are looked up in [dynamicLibrary].
  JniHelpersBindings(ffi.DynamicLibrary dynamicLibrary)
      : _lookup = dynamicLibrary.lookup;

  /// The symbols are looked up with [lookup].
  JniHelpersBindings.fromLookup(
      ffi.Pointer<T> Function<T extends ffi.NativeType>(String symbolName)
          lookup)
      : _lookup = lookup;

  /// VM initialization functions.
  ///
  /// Note these are the only symbols exported for JNI by the VM.
  int JNI_GetDefaultJavaVMInitArgs(
    ffi.Pointer<ffi.Void> arg0,
  ) {
    return _JNI_GetDefaultJavaVMInitArgs(
      arg0,
    );
  }

  late final _JNI_GetDefaultJavaVMInitArgsPtr =
      _lookup<ffi.NativeFunction<jint Function(ffi.Pointer<ffi.Void>)>>(
          'JNI_GetDefaultJavaVMInitArgs');
  late final _JNI_GetDefaultJavaVMInitArgs = _JNI_GetDefaultJavaVMInitArgsPtr
      .asFunction<int Function(ffi.Pointer<ffi.Void>)>();

  int JNI_CreateJavaVM(
    ffi.Pointer<ffi.Pointer<JavaVM>> arg0,
    ffi.Pointer<ffi.Pointer<JNIEnv>> arg1,
    ffi.Pointer<ffi.Void> arg2,
  ) {
    return _JNI_CreateJavaVM(
      arg0,
      arg1,
      arg2,
    );
  }

  late final _JNI_CreateJavaVMPtr = _lookup<
      ffi.NativeFunction<
          jint Function(
              ffi.Pointer<ffi.Pointer<JavaVM>>,
              ffi.Pointer<ffi.Pointer<JNIEnv>>,
              ffi.Pointer<ffi.Void>)>>('JNI_CreateJavaVM');
  late final _JNI_CreateJavaVM = _JNI_CreateJavaVMPtr.asFunction<
      int Function(ffi.Pointer<ffi.Pointer<JavaVM>>,
          ffi.Pointer<ffi.Pointer<JNIEnv>>, ffi.Pointer<ffi.Void>)>();

  int JNI_GetCreatedJavaVMs(
    ffi.Pointer<ffi.Pointer<JavaVM>> arg0,
    int arg1,
    ffi.Pointer<jsize> arg2,
  ) {
    return _JNI_GetCreatedJavaVMs(
      arg0,
      arg1,
      arg2,
    );
  }

  late final _JNI_GetCreatedJavaVMsPtr = _lookup<
      ffi.NativeFunction<
          jint Function(ffi.Pointer<ffi.Pointer<JavaVM>>, jsize,
              ffi.Pointer<jsize>)>>('JNI_GetCreatedJavaVMs');
  late final _JNI_GetCreatedJavaVMs = _JNI_GetCreatedJavaVMsPtr.asFunction<
      int Function(
          ffi.Pointer<ffi.Pointer<JavaVM>>, int, ffi.Pointer<jsize>)>();

  /// Prototypes for functions exported by loadable shared libs.  These are
  /// called by JNI, not provided by JNI.
  int JNI_OnLoad(
    ffi.Pointer<JavaVM> vm,
    ffi.Pointer<ffi.Void> reserved,
  ) {
    return _JNI_OnLoad(
      vm,
      reserved,
    );
  }

  late final _JNI_OnLoadPtr = _lookup<
      ffi.NativeFunction<
          jint Function(
              ffi.Pointer<JavaVM>, ffi.Pointer<ffi.Void>)>>('JNI_OnLoad');
  late final _JNI_OnLoad = _JNI_OnLoadPtr.asFunction<
      int Function(ffi.Pointer<JavaVM>, ffi.Pointer<ffi.Void>)>();

  void JNI_OnUnload(
    ffi.Pointer<JavaVM> vm,
    ffi.Pointer<ffi.Void> reserved,
  ) {
    return _JNI_OnUnload(
      vm,
      reserved,
    );
  }

  late final _JNI_OnUnloadPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(
              ffi.Pointer<JavaVM>, ffi.Pointer<ffi.Void>)>>('JNI_OnUnload');
  late final _JNI_OnUnload = _JNI_OnUnloadPtr.asFunction<
      void Function(ffi.Pointer<JavaVM>, ffi.Pointer<ffi.Void>)>();
}

class _jfieldID extends ffi.Opaque {}

class _jmethodID extends ffi.Opaque {}

/// JNI invocation interface.
class JNIInvokeInterface extends ffi.Struct {
  external ffi.Pointer<ffi.Void> reserved0;

  external ffi.Pointer<ffi.Void> reserved1;

  external ffi.Pointer<ffi.Void> reserved2;

  external ffi.Pointer<ffi.NativeFunction<jint Function(ffi.Pointer<JavaVM>)>>
      DestroyJavaVM;

  external ffi.Pointer<
      ffi.NativeFunction<
          jint Function(ffi.Pointer<JavaVM>, ffi.Pointer<ffi.Pointer<JNIEnv>>,
              ffi.Pointer<ffi.Void>)>> AttachCurrentThread;

  external ffi.Pointer<ffi.NativeFunction<jint Function(ffi.Pointer<JavaVM>)>>
      DetachCurrentThread;

  external ffi.Pointer<
      ffi.NativeFunction<
          jint Function(ffi.Pointer<JavaVM>, ffi.Pointer<ffi.Pointer<ffi.Void>>,
              jint)>> GetEnv;

  external ffi.Pointer<
      ffi.NativeFunction<
          jint Function(ffi.Pointer<JavaVM>, ffi.Pointer<ffi.Pointer<JNIEnv>>,
              ffi.Pointer<ffi.Void>)>> AttachCurrentThreadAsDaemon;
}

extension JNIInvokeInterfaceExtension
    on ffi.Pointer<ffi.Pointer<JNIInvokeInterface>> {
  @pragma('vm:prefer-inline')
  int Function(ffi.Pointer<JavaVM>) get DestroyJavaVM =>
      value.ref.DestroyJavaVM.asFunction();

  @pragma('vm:prefer-inline')
  int Function(ffi.Pointer<JavaVM>, ffi.Pointer<ffi.Pointer<JNIEnv>>,
          ffi.Pointer<ffi.Void>)
      get AttachCurrentThread => value.ref.AttachCurrentThread.asFunction();

  @pragma('vm:prefer-inline')
  int Function(ffi.Pointer<JavaVM>) get DetachCurrentThread =>
      value.ref.DetachCurrentThread.asFunction();

  @pragma('vm:prefer-inline')
  int Function(ffi.Pointer<JavaVM>, ffi.Pointer<ffi.Pointer<ffi.Void>>, int)
      get GetEnv => value.ref.GetEnv.asFunction();

  @pragma('vm:prefer-inline')
  int Function(ffi.Pointer<JavaVM>, ffi.Pointer<ffi.Pointer<JNIEnv>>,
          ffi.Pointer<ffi.Void>)
      get AttachCurrentThreadAsDaemon =>
          value.ref.AttachCurrentThreadAsDaemon.asFunction();
}

typedef jint = ffi.Int32;
typedef JavaVM = ffi.Pointer<JNIInvokeInterface>;
typedef JNIEnv = ffi.Pointer<JNINativeInterface>;

/// Table of interface function pointers.
class JNINativeInterface extends ffi.Struct {
  external ffi.Pointer<ffi.Void> reserved0;

  external ffi.Pointer<ffi.Void> reserved1;

  external ffi.Pointer<ffi.Void> reserved2;

  external ffi.Pointer<ffi.Void> reserved3;

  external ffi.Pointer<ffi.NativeFunction<jint Function(ffi.Pointer<JNIEnv>)>>
      GetVersion;

  external ffi.Pointer<
      ffi.NativeFunction<
          jclass Function(ffi.Pointer<JNIEnv>, ffi.Pointer<ffi.Char>, jobject,
              ffi.Pointer<jbyte>, jsize)>> DefineClass;

  external ffi.Pointer<
          ffi.NativeFunction<
              jclass Function(ffi.Pointer<JNIEnv>, ffi.Pointer<ffi.Char>)>>
      FindClass;

  external ffi.Pointer<
          ffi.NativeFunction<jmethodID Function(ffi.Pointer<JNIEnv>, jobject)>>
      FromReflectedMethod;

  external ffi.Pointer<
          ffi.NativeFunction<jfieldID Function(ffi.Pointer<JNIEnv>, jobject)>>
      FromReflectedField;

  /// spec doesn't show jboolean parameter
  external ffi.Pointer<
          ffi.NativeFunction<
              jobject Function(
                  ffi.Pointer<JNIEnv>, jclass, jmethodID, jboolean)>>
      ToReflectedMethod;

  external ffi.Pointer<
          ffi.NativeFunction<jclass Function(ffi.Pointer<JNIEnv>, jclass)>>
      GetSuperclass;

  external ffi.Pointer<
          ffi.NativeFunction<
              jboolean Function(ffi.Pointer<JNIEnv>, jclass, jclass)>>
      IsAssignableFrom;

  /// spec doesn't show jboolean parameter
  external ffi.Pointer<
          ffi.NativeFunction<
              jobject Function(
                  ffi.Pointer<JNIEnv>, jclass, jfieldID, jboolean)>>
      ToReflectedField;

  external ffi.Pointer<
      ffi.NativeFunction<jint Function(ffi.Pointer<JNIEnv>, jthrowable)>> Throw;

  external ffi.Pointer<
      ffi.NativeFunction<
          jint Function(
              ffi.Pointer<JNIEnv>, jclass, ffi.Pointer<ffi.Char>)>> ThrowNew;

  external ffi
          .Pointer<ffi.NativeFunction<jthrowable Function(ffi.Pointer<JNIEnv>)>>
      ExceptionOccurred;

  external ffi
          .Pointer<ffi.NativeFunction<ffi.Void Function(ffi.Pointer<JNIEnv>)>>
      ExceptionDescribe;

  external ffi
          .Pointer<ffi.NativeFunction<ffi.Void Function(ffi.Pointer<JNIEnv>)>>
      ExceptionClear;

  external ffi.Pointer<
          ffi.NativeFunction<
              ffi.Void Function(ffi.Pointer<JNIEnv>, ffi.Pointer<ffi.Char>)>>
      FatalError;

  external ffi
          .Pointer<ffi.NativeFunction<jint Function(ffi.Pointer<JNIEnv>, jint)>>
      PushLocalFrame;

  external ffi.Pointer<
          ffi.NativeFunction<jobject Function(ffi.Pointer<JNIEnv>, jobject)>>
      PopLocalFrame;

  external ffi.Pointer<
          ffi.NativeFunction<jobject Function(ffi.Pointer<JNIEnv>, jobject)>>
      NewGlobalRef;

  external ffi.Pointer<
          ffi.NativeFunction<ffi.Void Function(ffi.Pointer<JNIEnv>, jobject)>>
      DeleteGlobalRef;

  external ffi.Pointer<
          ffi.NativeFunction<ffi.Void Function(ffi.Pointer<JNIEnv>, jobject)>>
      DeleteLocalRef;

  external ffi.Pointer<
          ffi.NativeFunction<
              jboolean Function(ffi.Pointer<JNIEnv>, jobject, jobject)>>
      IsSameObject;

  external ffi.Pointer<
          ffi.NativeFunction<jobject Function(ffi.Pointer<JNIEnv>, jobject)>>
      NewLocalRef;

  external ffi
          .Pointer<ffi.NativeFunction<jint Function(ffi.Pointer<JNIEnv>, jint)>>
      EnsureLocalCapacity;

  external ffi.Pointer<
          ffi.NativeFunction<jobject Function(ffi.Pointer<JNIEnv>, jclass)>>
      AllocObject;

  external ffi.Pointer<
      ffi.NativeFunction<
          jobject Function(ffi.Pointer<JNIEnv>, jclass, jmethodID)>> NewObject;

  external ffi.Pointer<
      ffi.NativeFunction<
          jobject Function(ffi.Pointer<JNIEnv>, jclass, jmethodID,
              ffi.Pointer<__va_list_tag>)>> NewObjectV;

  external ffi.Pointer<
          ffi.NativeFunction<
              jobject Function(
                  ffi.Pointer<JNIEnv>, jclass, jmethodID, ffi.Pointer<jvalue>)>>
      NewObjectA;

  external ffi.Pointer<
          ffi.NativeFunction<jclass Function(ffi.Pointer<JNIEnv>, jobject)>>
      GetObjectClass;

  external ffi.Pointer<
          ffi.NativeFunction<
              jboolean Function(ffi.Pointer<JNIEnv>, jobject, jclass)>>
      IsInstanceOf;

  external ffi.Pointer<
      ffi.NativeFunction<
          jmethodID Function(ffi.Pointer<JNIEnv>, jclass, ffi.Pointer<ffi.Char>,
              ffi.Pointer<ffi.Char>)>> GetMethodID;

  external ffi.Pointer<
          ffi.NativeFunction<
              jobject Function(ffi.Pointer<JNIEnv>, jobject, jmethodID)>>
      CallObjectMethod;

  external ffi.Pointer<
      ffi.NativeFunction<
          jobject Function(ffi.Pointer<JNIEnv>, jobject, jmethodID,
              ffi.Pointer<__va_list_tag>)>> CallObjectMethodV;

  external ffi.Pointer<
      ffi.NativeFunction<
          jobject Function(ffi.Pointer<JNIEnv>, jobject, jmethodID,
              ffi.Pointer<jvalue>)>> CallObjectMethodA;

  external ffi.Pointer<
          ffi.NativeFunction<
              jboolean Function(ffi.Pointer<JNIEnv>, jobject, jmethodID)>>
      CallBooleanMethod;

  external ffi.Pointer<
      ffi.NativeFunction<
          jboolean Function(ffi.Pointer<JNIEnv>, jobject, jmethodID,
              ffi.Pointer<__va_list_tag>)>> CallBooleanMethodV;

  external ffi.Pointer<
      ffi.NativeFunction<
          jboolean Function(ffi.Pointer<JNIEnv>, jobject, jmethodID,
              ffi.Pointer<jvalue>)>> CallBooleanMethodA;

  external ffi.Pointer<
          ffi.NativeFunction<
              jbyte Function(ffi.Pointer<JNIEnv>, jobject, jmethodID)>>
      CallByteMethod;

  external ffi.Pointer<
      ffi.NativeFunction<
          jbyte Function(ffi.Pointer<JNIEnv>, jobject, jmethodID,
              ffi.Pointer<__va_list_tag>)>> CallByteMethodV;

  external ffi.Pointer<
      ffi.NativeFunction<
          jbyte Function(ffi.Pointer<JNIEnv>, jobject, jmethodID,
              ffi.Pointer<jvalue>)>> CallByteMethodA;

  external ffi.Pointer<
          ffi.NativeFunction<
              jchar Function(ffi.Pointer<JNIEnv>, jobject, jmethodID)>>
      CallCharMethod;

  external ffi.Pointer<
      ffi.NativeFunction<
          jchar Function(ffi.Pointer<JNIEnv>, jobject, jmethodID,
              ffi.Pointer<__va_list_tag>)>> CallCharMethodV;

  external ffi.Pointer<
      ffi.NativeFunction<
          jchar Function(ffi.Pointer<JNIEnv>, jobject, jmethodID,
              ffi.Pointer<jvalue>)>> CallCharMethodA;

  external ffi.Pointer<
          ffi.NativeFunction<
              jshort Function(ffi.Pointer<JNIEnv>, jobject, jmethodID)>>
      CallShortMethod;

  external ffi.Pointer<
      ffi.NativeFunction<
          jshort Function(ffi.Pointer<JNIEnv>, jobject, jmethodID,
              ffi.Pointer<__va_list_tag>)>> CallShortMethodV;

  external ffi.Pointer<
      ffi.NativeFunction<
          jshort Function(ffi.Pointer<JNIEnv>, jobject, jmethodID,
              ffi.Pointer<jvalue>)>> CallShortMethodA;

  external ffi.Pointer<
          ffi.NativeFunction<
              jint Function(ffi.Pointer<JNIEnv>, jobject, jmethodID)>>
      CallIntMethod;

  external ffi.Pointer<
      ffi.NativeFunction<
          jint Function(ffi.Pointer<JNIEnv>, jobject, jmethodID,
              ffi.Pointer<__va_list_tag>)>> CallIntMethodV;

  external ffi.Pointer<
      ffi.NativeFunction<
          jint Function(ffi.Pointer<JNIEnv>, jobject, jmethodID,
              ffi.Pointer<jvalue>)>> CallIntMethodA;

  external ffi.Pointer<
          ffi.NativeFunction<
              jlong Function(ffi.Pointer<JNIEnv>, jobject, jmethodID)>>
      CallLongMethod;

  external ffi.Pointer<
      ffi.NativeFunction<
          jlong Function(ffi.Pointer<JNIEnv>, jobject, jmethodID,
              ffi.Pointer<__va_list_tag>)>> CallLongMethodV;

  external ffi.Pointer<
      ffi.NativeFunction<
          jlong Function(ffi.Pointer<JNIEnv>, jobject, jmethodID,
              ffi.Pointer<jvalue>)>> CallLongMethodA;

  external ffi.Pointer<
          ffi.NativeFunction<
              jfloat Function(ffi.Pointer<JNIEnv>, jobject, jmethodID)>>
      CallFloatMethod;

  external ffi.Pointer<
      ffi.NativeFunction<
          jfloat Function(ffi.Pointer<JNIEnv>, jobject, jmethodID,
              ffi.Pointer<__va_list_tag>)>> CallFloatMethodV;

  external ffi.Pointer<
      ffi.NativeFunction<
          jfloat Function(ffi.Pointer<JNIEnv>, jobject, jmethodID,
              ffi.Pointer<jvalue>)>> CallFloatMethodA;

  external ffi.Pointer<
          ffi.NativeFunction<
              jdouble Function(ffi.Pointer<JNIEnv>, jobject, jmethodID)>>
      CallDoubleMethod;

  external ffi.Pointer<
      ffi.NativeFunction<
          jdouble Function(ffi.Pointer<JNIEnv>, jobject, jmethodID,
              ffi.Pointer<__va_list_tag>)>> CallDoubleMethodV;

  external ffi.Pointer<
      ffi.NativeFunction<
          jdouble Function(ffi.Pointer<JNIEnv>, jobject, jmethodID,
              ffi.Pointer<jvalue>)>> CallDoubleMethodA;

  external ffi.Pointer<
          ffi.NativeFunction<
              ffi.Void Function(ffi.Pointer<JNIEnv>, jobject, jmethodID)>>
      CallVoidMethod;

  external ffi.Pointer<
      ffi.NativeFunction<
          ffi.Void Function(ffi.Pointer<JNIEnv>, jobject, jmethodID,
              ffi.Pointer<__va_list_tag>)>> CallVoidMethodV;

  external ffi.Pointer<
      ffi.NativeFunction<
          ffi.Void Function(ffi.Pointer<JNIEnv>, jobject, jmethodID,
              ffi.Pointer<jvalue>)>> CallVoidMethodA;

  external ffi.Pointer<
          ffi.NativeFunction<
              jobject Function(
                  ffi.Pointer<JNIEnv>, jobject, jclass, jmethodID)>>
      CallNonvirtualObjectMethod;

  external ffi.Pointer<
      ffi.NativeFunction<
          jobject Function(ffi.Pointer<JNIEnv>, jobject, jclass, jmethodID,
              ffi.Pointer<__va_list_tag>)>> CallNonvirtualObjectMethodV;

  external ffi.Pointer<
      ffi.NativeFunction<
          jobject Function(ffi.Pointer<JNIEnv>, jobject, jclass, jmethodID,
              ffi.Pointer<jvalue>)>> CallNonvirtualObjectMethodA;

  external ffi.Pointer<
          ffi.NativeFunction<
              jboolean Function(
                  ffi.Pointer<JNIEnv>, jobject, jclass, jmethodID)>>
      CallNonvirtualBooleanMethod;

  external ffi.Pointer<
      ffi.NativeFunction<
          jboolean Function(ffi.Pointer<JNIEnv>, jobject, jclass, jmethodID,
              ffi.Pointer<__va_list_tag>)>> CallNonvirtualBooleanMethodV;

  external ffi.Pointer<
      ffi.NativeFunction<
          jboolean Function(ffi.Pointer<JNIEnv>, jobject, jclass, jmethodID,
              ffi.Pointer<jvalue>)>> CallNonvirtualBooleanMethodA;

  external ffi.Pointer<
          ffi.NativeFunction<
              jbyte Function(ffi.Pointer<JNIEnv>, jobject, jclass, jmethodID)>>
      CallNonvirtualByteMethod;

  external ffi.Pointer<
      ffi.NativeFunction<
          jbyte Function(ffi.Pointer<JNIEnv>, jobject, jclass, jmethodID,
              ffi.Pointer<__va_list_tag>)>> CallNonvirtualByteMethodV;

  external ffi.Pointer<
      ffi.NativeFunction<
          jbyte Function(ffi.Pointer<JNIEnv>, jobject, jclass, jmethodID,
              ffi.Pointer<jvalue>)>> CallNonvirtualByteMethodA;

  external ffi.Pointer<
          ffi.NativeFunction<
              jchar Function(ffi.Pointer<JNIEnv>, jobject, jclass, jmethodID)>>
      CallNonvirtualCharMethod;

  external ffi.Pointer<
      ffi.NativeFunction<
          jchar Function(ffi.Pointer<JNIEnv>, jobject, jclass, jmethodID,
              ffi.Pointer<__va_list_tag>)>> CallNonvirtualCharMethodV;

  external ffi.Pointer<
      ffi.NativeFunction<
          jchar Function(ffi.Pointer<JNIEnv>, jobject, jclass, jmethodID,
              ffi.Pointer<jvalue>)>> CallNonvirtualCharMethodA;

  external ffi.Pointer<
          ffi.NativeFunction<
              jshort Function(ffi.Pointer<JNIEnv>, jobject, jclass, jmethodID)>>
      CallNonvirtualShortMethod;

  external ffi.Pointer<
      ffi.NativeFunction<
          jshort Function(ffi.Pointer<JNIEnv>, jobject, jclass, jmethodID,
              ffi.Pointer<__va_list_tag>)>> CallNonvirtualShortMethodV;

  external ffi.Pointer<
      ffi.NativeFunction<
          jshort Function(ffi.Pointer<JNIEnv>, jobject, jclass, jmethodID,
              ffi.Pointer<jvalue>)>> CallNonvirtualShortMethodA;

  external ffi.Pointer<
          ffi.NativeFunction<
              jint Function(ffi.Pointer<JNIEnv>, jobject, jclass, jmethodID)>>
      CallNonvirtualIntMethod;

  external ffi.Pointer<
      ffi.NativeFunction<
          jint Function(ffi.Pointer<JNIEnv>, jobject, jclass, jmethodID,
              ffi.Pointer<__va_list_tag>)>> CallNonvirtualIntMethodV;

  external ffi.Pointer<
      ffi.NativeFunction<
          jint Function(ffi.Pointer<JNIEnv>, jobject, jclass, jmethodID,
              ffi.Pointer<jvalue>)>> CallNonvirtualIntMethodA;

  external ffi.Pointer<
          ffi.NativeFunction<
              jlong Function(ffi.Pointer<JNIEnv>, jobject, jclass, jmethodID)>>
      CallNonvirtualLongMethod;

  external ffi.Pointer<
      ffi.NativeFunction<
          jlong Function(ffi.Pointer<JNIEnv>, jobject, jclass, jmethodID,
              ffi.Pointer<__va_list_tag>)>> CallNonvirtualLongMethodV;

  external ffi.Pointer<
      ffi.NativeFunction<
          jlong Function(ffi.Pointer<JNIEnv>, jobject, jclass, jmethodID,
              ffi.Pointer<jvalue>)>> CallNonvirtualLongMethodA;

  external ffi.Pointer<
          ffi.NativeFunction<
              jfloat Function(ffi.Pointer<JNIEnv>, jobject, jclass, jmethodID)>>
      CallNonvirtualFloatMethod;

  external ffi.Pointer<
      ffi.NativeFunction<
          jfloat Function(ffi.Pointer<JNIEnv>, jobject, jclass, jmethodID,
              ffi.Pointer<__va_list_tag>)>> CallNonvirtualFloatMethodV;

  external ffi.Pointer<
      ffi.NativeFunction<
          jfloat Function(ffi.Pointer<JNIEnv>, jobject, jclass, jmethodID,
              ffi.Pointer<jvalue>)>> CallNonvirtualFloatMethodA;

  external ffi.Pointer<
          ffi.NativeFunction<
              jdouble Function(
                  ffi.Pointer<JNIEnv>, jobject, jclass, jmethodID)>>
      CallNonvirtualDoubleMethod;

  external ffi.Pointer<
      ffi.NativeFunction<
          jdouble Function(ffi.Pointer<JNIEnv>, jobject, jclass, jmethodID,
              ffi.Pointer<__va_list_tag>)>> CallNonvirtualDoubleMethodV;

  external ffi.Pointer<
      ffi.NativeFunction<
          jdouble Function(ffi.Pointer<JNIEnv>, jobject, jclass, jmethodID,
              ffi.Pointer<jvalue>)>> CallNonvirtualDoubleMethodA;

  external ffi.Pointer<
          ffi.NativeFunction<
              ffi.Void Function(
                  ffi.Pointer<JNIEnv>, jobject, jclass, jmethodID)>>
      CallNonvirtualVoidMethod;

  external ffi.Pointer<
      ffi.NativeFunction<
          ffi.Void Function(ffi.Pointer<JNIEnv>, jobject, jclass, jmethodID,
              ffi.Pointer<__va_list_tag>)>> CallNonvirtualVoidMethodV;

  external ffi.Pointer<
      ffi.NativeFunction<
          ffi.Void Function(ffi.Pointer<JNIEnv>, jobject, jclass, jmethodID,
              ffi.Pointer<jvalue>)>> CallNonvirtualVoidMethodA;

  external ffi.Pointer<
      ffi.NativeFunction<
          jfieldID Function(ffi.Pointer<JNIEnv>, jclass, ffi.Pointer<ffi.Char>,
              ffi.Pointer<ffi.Char>)>> GetFieldID;

  external ffi.Pointer<
          ffi.NativeFunction<
              jobject Function(ffi.Pointer<JNIEnv>, jobject, jfieldID)>>
      GetObjectField;

  external ffi.Pointer<
          ffi.NativeFunction<
              jboolean Function(ffi.Pointer<JNIEnv>, jobject, jfieldID)>>
      GetBooleanField;

  external ffi.Pointer<
      ffi.NativeFunction<
          jbyte Function(ffi.Pointer<JNIEnv>, jobject, jfieldID)>> GetByteField;

  external ffi.Pointer<
      ffi.NativeFunction<
          jchar Function(ffi.Pointer<JNIEnv>, jobject, jfieldID)>> GetCharField;

  external ffi.Pointer<
          ffi.NativeFunction<
              jshort Function(ffi.Pointer<JNIEnv>, jobject, jfieldID)>>
      GetShortField;

  external ffi.Pointer<
      ffi.NativeFunction<
          jint Function(ffi.Pointer<JNIEnv>, jobject, jfieldID)>> GetIntField;

  external ffi.Pointer<
      ffi.NativeFunction<
          jlong Function(ffi.Pointer<JNIEnv>, jobject, jfieldID)>> GetLongField;

  external ffi.Pointer<
          ffi.NativeFunction<
              jfloat Function(ffi.Pointer<JNIEnv>, jobject, jfieldID)>>
      GetFloatField;

  external ffi.Pointer<
          ffi.NativeFunction<
              jdouble Function(ffi.Pointer<JNIEnv>, jobject, jfieldID)>>
      GetDoubleField;

  external ffi.Pointer<
      ffi.NativeFunction<
          ffi.Void Function(
              ffi.Pointer<JNIEnv>, jobject, jfieldID, jobject)>> SetObjectField;

  external ffi.Pointer<
          ffi.NativeFunction<
              ffi.Void Function(
                  ffi.Pointer<JNIEnv>, jobject, jfieldID, jboolean)>>
      SetBooleanField;

  external ffi.Pointer<
          ffi.NativeFunction<
              ffi.Void Function(ffi.Pointer<JNIEnv>, jobject, jfieldID, jbyte)>>
      SetByteField;

  external ffi.Pointer<
          ffi.NativeFunction<
              ffi.Void Function(ffi.Pointer<JNIEnv>, jobject, jfieldID, jchar)>>
      SetCharField;

  external ffi.Pointer<
      ffi.NativeFunction<
          ffi.Void Function(
              ffi.Pointer<JNIEnv>, jobject, jfieldID, jshort)>> SetShortField;

  external ffi.Pointer<
          ffi.NativeFunction<
              ffi.Void Function(ffi.Pointer<JNIEnv>, jobject, jfieldID, jint)>>
      SetIntField;

  external ffi.Pointer<
          ffi.NativeFunction<
              ffi.Void Function(ffi.Pointer<JNIEnv>, jobject, jfieldID, jlong)>>
      SetLongField;

  external ffi.Pointer<
      ffi.NativeFunction<
          ffi.Void Function(
              ffi.Pointer<JNIEnv>, jobject, jfieldID, jfloat)>> SetFloatField;

  external ffi.Pointer<
      ffi.NativeFunction<
          ffi.Void Function(
              ffi.Pointer<JNIEnv>, jobject, jfieldID, jdouble)>> SetDoubleField;

  external ffi.Pointer<
      ffi.NativeFunction<
          jmethodID Function(ffi.Pointer<JNIEnv>, jclass, ffi.Pointer<ffi.Char>,
              ffi.Pointer<ffi.Char>)>> GetStaticMethodID;

  external ffi.Pointer<
          ffi.NativeFunction<
              jobject Function(ffi.Pointer<JNIEnv>, jclass, jmethodID)>>
      CallStaticObjectMethod;

  external ffi.Pointer<
      ffi.NativeFunction<
          jobject Function(ffi.Pointer<JNIEnv>, jclass, jmethodID,
              ffi.Pointer<__va_list_tag>)>> CallStaticObjectMethodV;

  external ffi.Pointer<
          ffi.NativeFunction<
              jobject Function(
                  ffi.Pointer<JNIEnv>, jclass, jmethodID, ffi.Pointer<jvalue>)>>
      CallStaticObjectMethodA;

  external ffi.Pointer<
          ffi.NativeFunction<
              jboolean Function(ffi.Pointer<JNIEnv>, jclass, jmethodID)>>
      CallStaticBooleanMethod;

  external ffi.Pointer<
      ffi.NativeFunction<
          jboolean Function(ffi.Pointer<JNIEnv>, jclass, jmethodID,
              ffi.Pointer<__va_list_tag>)>> CallStaticBooleanMethodV;

  external ffi.Pointer<
          ffi.NativeFunction<
              jboolean Function(
                  ffi.Pointer<JNIEnv>, jclass, jmethodID, ffi.Pointer<jvalue>)>>
      CallStaticBooleanMethodA;

  external ffi.Pointer<
          ffi.NativeFunction<
              jbyte Function(ffi.Pointer<JNIEnv>, jclass, jmethodID)>>
      CallStaticByteMethod;

  external ffi.Pointer<
      ffi.NativeFunction<
          jbyte Function(ffi.Pointer<JNIEnv>, jclass, jmethodID,
              ffi.Pointer<__va_list_tag>)>> CallStaticByteMethodV;

  external ffi.Pointer<
          ffi.NativeFunction<
              jbyte Function(
                  ffi.Pointer<JNIEnv>, jclass, jmethodID, ffi.Pointer<jvalue>)>>
      CallStaticByteMethodA;

  external ffi.Pointer<
          ffi.NativeFunction<
              jchar Function(ffi.Pointer<JNIEnv>, jclass, jmethodID)>>
      CallStaticCharMethod;

  external ffi.Pointer<
      ffi.NativeFunction<
          jchar Function(ffi.Pointer<JNIEnv>, jclass, jmethodID,
              ffi.Pointer<__va_list_tag>)>> CallStaticCharMethodV;

  external ffi.Pointer<
          ffi.NativeFunction<
              jchar Function(
                  ffi.Pointer<JNIEnv>, jclass, jmethodID, ffi.Pointer<jvalue>)>>
      CallStaticCharMethodA;

  external ffi.Pointer<
          ffi.NativeFunction<
              jshort Function(ffi.Pointer<JNIEnv>, jclass, jmethodID)>>
      CallStaticShortMethod;

  external ffi.Pointer<
      ffi.NativeFunction<
          jshort Function(ffi.Pointer<JNIEnv>, jclass, jmethodID,
              ffi.Pointer<__va_list_tag>)>> CallStaticShortMethodV;

  external ffi.Pointer<
          ffi.NativeFunction<
              jshort Function(
                  ffi.Pointer<JNIEnv>, jclass, jmethodID, ffi.Pointer<jvalue>)>>
      CallStaticShortMethodA;

  external ffi.Pointer<
          ffi.NativeFunction<
              jint Function(ffi.Pointer<JNIEnv>, jclass, jmethodID)>>
      CallStaticIntMethod;

  external ffi.Pointer<
      ffi.NativeFunction<
          jint Function(ffi.Pointer<JNIEnv>, jclass, jmethodID,
              ffi.Pointer<__va_list_tag>)>> CallStaticIntMethodV;

  external ffi.Pointer<
          ffi.NativeFunction<
              jint Function(
                  ffi.Pointer<JNIEnv>, jclass, jmethodID, ffi.Pointer<jvalue>)>>
      CallStaticIntMethodA;

  external ffi.Pointer<
          ffi.NativeFunction<
              jlong Function(ffi.Pointer<JNIEnv>, jclass, jmethodID)>>
      CallStaticLongMethod;

  external ffi.Pointer<
      ffi.NativeFunction<
          jlong Function(ffi.Pointer<JNIEnv>, jclass, jmethodID,
              ffi.Pointer<__va_list_tag>)>> CallStaticLongMethodV;

  external ffi.Pointer<
          ffi.NativeFunction<
              jlong Function(
                  ffi.Pointer<JNIEnv>, jclass, jmethodID, ffi.Pointer<jvalue>)>>
      CallStaticLongMethodA;

  external ffi.Pointer<
          ffi.NativeFunction<
              jfloat Function(ffi.Pointer<JNIEnv>, jclass, jmethodID)>>
      CallStaticFloatMethod;

  external ffi.Pointer<
      ffi.NativeFunction<
          jfloat Function(ffi.Pointer<JNIEnv>, jclass, jmethodID,
              ffi.Pointer<__va_list_tag>)>> CallStaticFloatMethodV;

  external ffi.Pointer<
          ffi.NativeFunction<
              jfloat Function(
                  ffi.Pointer<JNIEnv>, jclass, jmethodID, ffi.Pointer<jvalue>)>>
      CallStaticFloatMethodA;

  external ffi.Pointer<
          ffi.NativeFunction<
              jdouble Function(ffi.Pointer<JNIEnv>, jclass, jmethodID)>>
      CallStaticDoubleMethod;

  external ffi.Pointer<
      ffi.NativeFunction<
          jdouble Function(ffi.Pointer<JNIEnv>, jclass, jmethodID,
              ffi.Pointer<__va_list_tag>)>> CallStaticDoubleMethodV;

  external ffi.Pointer<
          ffi.NativeFunction<
              jdouble Function(
                  ffi.Pointer<JNIEnv>, jclass, jmethodID, ffi.Pointer<jvalue>)>>
      CallStaticDoubleMethodA;

  external ffi.Pointer<
          ffi.NativeFunction<
              ffi.Void Function(ffi.Pointer<JNIEnv>, jclass, jmethodID)>>
      CallStaticVoidMethod;

  external ffi.Pointer<
      ffi.NativeFunction<
          ffi.Void Function(ffi.Pointer<JNIEnv>, jclass, jmethodID,
              ffi.Pointer<__va_list_tag>)>> CallStaticVoidMethodV;

  external ffi.Pointer<
          ffi.NativeFunction<
              ffi.Void Function(
                  ffi.Pointer<JNIEnv>, jclass, jmethodID, ffi.Pointer<jvalue>)>>
      CallStaticVoidMethodA;

  external ffi.Pointer<
      ffi.NativeFunction<
          jfieldID Function(ffi.Pointer<JNIEnv>, jclass, ffi.Pointer<ffi.Char>,
              ffi.Pointer<ffi.Char>)>> GetStaticFieldID;

  external ffi.Pointer<
          ffi.NativeFunction<
              jobject Function(ffi.Pointer<JNIEnv>, jclass, jfieldID)>>
      GetStaticObjectField;

  external ffi.Pointer<
          ffi.NativeFunction<
              jboolean Function(ffi.Pointer<JNIEnv>, jclass, jfieldID)>>
      GetStaticBooleanField;

  external ffi.Pointer<
          ffi.NativeFunction<
              jbyte Function(ffi.Pointer<JNIEnv>, jclass, jfieldID)>>
      GetStaticByteField;

  external ffi.Pointer<
          ffi.NativeFunction<
              jchar Function(ffi.Pointer<JNIEnv>, jclass, jfieldID)>>
      GetStaticCharField;

  external ffi.Pointer<
          ffi.NativeFunction<
              jshort Function(ffi.Pointer<JNIEnv>, jclass, jfieldID)>>
      GetStaticShortField;

  external ffi.Pointer<
          ffi.NativeFunction<
              jint Function(ffi.Pointer<JNIEnv>, jclass, jfieldID)>>
      GetStaticIntField;

  external ffi.Pointer<
          ffi.NativeFunction<
              jlong Function(ffi.Pointer<JNIEnv>, jclass, jfieldID)>>
      GetStaticLongField;

  external ffi.Pointer<
          ffi.NativeFunction<
              jfloat Function(ffi.Pointer<JNIEnv>, jclass, jfieldID)>>
      GetStaticFloatField;

  external ffi.Pointer<
          ffi.NativeFunction<
              jdouble Function(ffi.Pointer<JNIEnv>, jclass, jfieldID)>>
      GetStaticDoubleField;

  external ffi.Pointer<
          ffi.NativeFunction<
              ffi.Void Function(
                  ffi.Pointer<JNIEnv>, jclass, jfieldID, jobject)>>
      SetStaticObjectField;

  external ffi.Pointer<
          ffi.NativeFunction<
              ffi.Void Function(
                  ffi.Pointer<JNIEnv>, jclass, jfieldID, jboolean)>>
      SetStaticBooleanField;

  external ffi.Pointer<
          ffi.NativeFunction<
              ffi.Void Function(ffi.Pointer<JNIEnv>, jclass, jfieldID, jbyte)>>
      SetStaticByteField;

  external ffi.Pointer<
          ffi.NativeFunction<
              ffi.Void Function(ffi.Pointer<JNIEnv>, jclass, jfieldID, jchar)>>
      SetStaticCharField;

  external ffi.Pointer<
          ffi.NativeFunction<
              ffi.Void Function(ffi.Pointer<JNIEnv>, jclass, jfieldID, jshort)>>
      SetStaticShortField;

  external ffi.Pointer<
          ffi.NativeFunction<
              ffi.Void Function(ffi.Pointer<JNIEnv>, jclass, jfieldID, jint)>>
      SetStaticIntField;

  external ffi.Pointer<
          ffi.NativeFunction<
              ffi.Void Function(ffi.Pointer<JNIEnv>, jclass, jfieldID, jlong)>>
      SetStaticLongField;

  external ffi.Pointer<
          ffi.NativeFunction<
              ffi.Void Function(ffi.Pointer<JNIEnv>, jclass, jfieldID, jfloat)>>
      SetStaticFloatField;

  external ffi.Pointer<
          ffi.NativeFunction<
              ffi.Void Function(
                  ffi.Pointer<JNIEnv>, jclass, jfieldID, jdouble)>>
      SetStaticDoubleField;

  external ffi.Pointer<
          ffi.NativeFunction<
              jstring Function(ffi.Pointer<JNIEnv>, ffi.Pointer<jchar>, jsize)>>
      NewString;

  external ffi.Pointer<
          ffi.NativeFunction<jsize Function(ffi.Pointer<JNIEnv>, jstring)>>
      GetStringLength;

  external ffi.Pointer<
          ffi.NativeFunction<
              ffi.Pointer<jchar> Function(
                  ffi.Pointer<JNIEnv>, jstring, ffi.Pointer<jboolean>)>>
      GetStringChars;

  external ffi.Pointer<
          ffi.NativeFunction<
              ffi.Void Function(
                  ffi.Pointer<JNIEnv>, jstring, ffi.Pointer<jchar>)>>
      ReleaseStringChars;

  external ffi.Pointer<
          ffi.NativeFunction<
              jstring Function(ffi.Pointer<JNIEnv>, ffi.Pointer<ffi.Char>)>>
      NewStringUTF;

  external ffi.Pointer<
          ffi.NativeFunction<jsize Function(ffi.Pointer<JNIEnv>, jstring)>>
      GetStringUTFLength;

  /// JNI spec says this returns const jbyte*, but that's inconsistent
  external ffi.Pointer<
          ffi.NativeFunction<
              ffi.Pointer<ffi.Char> Function(
                  ffi.Pointer<JNIEnv>, jstring, ffi.Pointer<jboolean>)>>
      GetStringUTFChars;

  external ffi.Pointer<
          ffi.NativeFunction<
              ffi.Void Function(
                  ffi.Pointer<JNIEnv>, jstring, ffi.Pointer<ffi.Char>)>>
      ReleaseStringUTFChars;

  external ffi.Pointer<
          ffi.NativeFunction<jsize Function(ffi.Pointer<JNIEnv>, jarray)>>
      GetArrayLength;

  external ffi.Pointer<
      ffi.NativeFunction<
          jobjectArray Function(
              ffi.Pointer<JNIEnv>, jsize, jclass, jobject)>> NewObjectArray;

  external ffi.Pointer<
          ffi.NativeFunction<
              jobject Function(ffi.Pointer<JNIEnv>, jobjectArray, jsize)>>
      GetObjectArrayElement;

  external ffi.Pointer<
          ffi.NativeFunction<
              ffi.Void Function(
                  ffi.Pointer<JNIEnv>, jobjectArray, jsize, jobject)>>
      SetObjectArrayElement;

  external ffi.Pointer<
      ffi.NativeFunction<
          jbooleanArray Function(ffi.Pointer<JNIEnv>, jsize)>> NewBooleanArray;

  external ffi.Pointer<
          ffi.NativeFunction<jbyteArray Function(ffi.Pointer<JNIEnv>, jsize)>>
      NewByteArray;

  external ffi.Pointer<
          ffi.NativeFunction<jcharArray Function(ffi.Pointer<JNIEnv>, jsize)>>
      NewCharArray;

  external ffi.Pointer<
          ffi.NativeFunction<jshortArray Function(ffi.Pointer<JNIEnv>, jsize)>>
      NewShortArray;

  external ffi.Pointer<
          ffi.NativeFunction<jintArray Function(ffi.Pointer<JNIEnv>, jsize)>>
      NewIntArray;

  external ffi.Pointer<
          ffi.NativeFunction<jlongArray Function(ffi.Pointer<JNIEnv>, jsize)>>
      NewLongArray;

  external ffi.Pointer<
          ffi.NativeFunction<jfloatArray Function(ffi.Pointer<JNIEnv>, jsize)>>
      NewFloatArray;

  external ffi.Pointer<
          ffi.NativeFunction<jdoubleArray Function(ffi.Pointer<JNIEnv>, jsize)>>
      NewDoubleArray;

  external ffi.Pointer<
          ffi.NativeFunction<
              ffi.Pointer<jboolean> Function(
                  ffi.Pointer<JNIEnv>, jbooleanArray, ffi.Pointer<jboolean>)>>
      GetBooleanArrayElements;

  external ffi.Pointer<
          ffi.NativeFunction<
              ffi.Pointer<jbyte> Function(
                  ffi.Pointer<JNIEnv>, jbyteArray, ffi.Pointer<jboolean>)>>
      GetByteArrayElements;

  external ffi.Pointer<
          ffi.NativeFunction<
              ffi.Pointer<jchar> Function(
                  ffi.Pointer<JNIEnv>, jcharArray, ffi.Pointer<jboolean>)>>
      GetCharArrayElements;

  external ffi.Pointer<
          ffi.NativeFunction<
              ffi.Pointer<jshort> Function(
                  ffi.Pointer<JNIEnv>, jshortArray, ffi.Pointer<jboolean>)>>
      GetShortArrayElements;

  external ffi.Pointer<
          ffi.NativeFunction<
              ffi.Pointer<jint> Function(
                  ffi.Pointer<JNIEnv>, jintArray, ffi.Pointer<jboolean>)>>
      GetIntArrayElements;

  external ffi.Pointer<
          ffi.NativeFunction<
              ffi.Pointer<jlong> Function(
                  ffi.Pointer<JNIEnv>, jlongArray, ffi.Pointer<jboolean>)>>
      GetLongArrayElements;

  external ffi.Pointer<
          ffi.NativeFunction<
              ffi.Pointer<jfloat> Function(
                  ffi.Pointer<JNIEnv>, jfloatArray, ffi.Pointer<jboolean>)>>
      GetFloatArrayElements;

  external ffi.Pointer<
          ffi.NativeFunction<
              ffi.Pointer<jdouble> Function(
                  ffi.Pointer<JNIEnv>, jdoubleArray, ffi.Pointer<jboolean>)>>
      GetDoubleArrayElements;

  external ffi.Pointer<
      ffi.NativeFunction<
          ffi.Void Function(ffi.Pointer<JNIEnv>, jbooleanArray,
              ffi.Pointer<jboolean>, jint)>> ReleaseBooleanArrayElements;

  external ffi.Pointer<
          ffi.NativeFunction<
              ffi.Void Function(
                  ffi.Pointer<JNIEnv>, jbyteArray, ffi.Pointer<jbyte>, jint)>>
      ReleaseByteArrayElements;

  external ffi.Pointer<
          ffi.NativeFunction<
              ffi.Void Function(
                  ffi.Pointer<JNIEnv>, jcharArray, ffi.Pointer<jchar>, jint)>>
      ReleaseCharArrayElements;

  external ffi.Pointer<
          ffi.NativeFunction<
              ffi.Void Function(
                  ffi.Pointer<JNIEnv>, jshortArray, ffi.Pointer<jshort>, jint)>>
      ReleaseShortArrayElements;

  external ffi.Pointer<
          ffi.NativeFunction<
              ffi.Void Function(
                  ffi.Pointer<JNIEnv>, jintArray, ffi.Pointer<jint>, jint)>>
      ReleaseIntArrayElements;

  external ffi.Pointer<
          ffi.NativeFunction<
              ffi.Void Function(
                  ffi.Pointer<JNIEnv>, jlongArray, ffi.Pointer<jlong>, jint)>>
      ReleaseLongArrayElements;

  external ffi.Pointer<
          ffi.NativeFunction<
              ffi.Void Function(
                  ffi.Pointer<JNIEnv>, jfloatArray, ffi.Pointer<jfloat>, jint)>>
      ReleaseFloatArrayElements;

  external ffi.Pointer<
      ffi.NativeFunction<
          ffi.Void Function(ffi.Pointer<JNIEnv>, jdoubleArray,
              ffi.Pointer<jdouble>, jint)>> ReleaseDoubleArrayElements;

  external ffi.Pointer<
      ffi.NativeFunction<
          ffi.Void Function(ffi.Pointer<JNIEnv>, jbooleanArray, jsize, jsize,
              ffi.Pointer<jboolean>)>> GetBooleanArrayRegion;

  external ffi.Pointer<
      ffi.NativeFunction<
          ffi.Void Function(ffi.Pointer<JNIEnv>, jbyteArray, jsize, jsize,
              ffi.Pointer<jbyte>)>> GetByteArrayRegion;

  external ffi.Pointer<
      ffi.NativeFunction<
          ffi.Void Function(ffi.Pointer<JNIEnv>, jcharArray, jsize, jsize,
              ffi.Pointer<jchar>)>> GetCharArrayRegion;

  external ffi.Pointer<
      ffi.NativeFunction<
          ffi.Void Function(ffi.Pointer<JNIEnv>, jshortArray, jsize, jsize,
              ffi.Pointer<jshort>)>> GetShortArrayRegion;

  external ffi.Pointer<
      ffi.NativeFunction<
          ffi.Void Function(ffi.Pointer<JNIEnv>, jintArray, jsize, jsize,
              ffi.Pointer<jint>)>> GetIntArrayRegion;

  external ffi.Pointer<
      ffi.NativeFunction<
          ffi.Void Function(ffi.Pointer<JNIEnv>, jlongArray, jsize, jsize,
              ffi.Pointer<jlong>)>> GetLongArrayRegion;

  external ffi.Pointer<
      ffi.NativeFunction<
          ffi.Void Function(ffi.Pointer<JNIEnv>, jfloatArray, jsize, jsize,
              ffi.Pointer<jfloat>)>> GetFloatArrayRegion;

  external ffi.Pointer<
      ffi.NativeFunction<
          ffi.Void Function(ffi.Pointer<JNIEnv>, jdoubleArray, jsize, jsize,
              ffi.Pointer<jdouble>)>> GetDoubleArrayRegion;

  /// spec shows these without const; some jni.h do, some don't
  external ffi.Pointer<
      ffi.NativeFunction<
          ffi.Void Function(ffi.Pointer<JNIEnv>, jbooleanArray, jsize, jsize,
              ffi.Pointer<jboolean>)>> SetBooleanArrayRegion;

  external ffi.Pointer<
      ffi.NativeFunction<
          ffi.Void Function(ffi.Pointer<JNIEnv>, jbyteArray, jsize, jsize,
              ffi.Pointer<jbyte>)>> SetByteArrayRegion;

  external ffi.Pointer<
      ffi.NativeFunction<
          ffi.Void Function(ffi.Pointer<JNIEnv>, jcharArray, jsize, jsize,
              ffi.Pointer<jchar>)>> SetCharArrayRegion;

  external ffi.Pointer<
      ffi.NativeFunction<
          ffi.Void Function(ffi.Pointer<JNIEnv>, jshortArray, jsize, jsize,
              ffi.Pointer<jshort>)>> SetShortArrayRegion;

  external ffi.Pointer<
      ffi.NativeFunction<
          ffi.Void Function(ffi.Pointer<JNIEnv>, jintArray, jsize, jsize,
              ffi.Pointer<jint>)>> SetIntArrayRegion;

  external ffi.Pointer<
      ffi.NativeFunction<
          ffi.Void Function(ffi.Pointer<JNIEnv>, jlongArray, jsize, jsize,
              ffi.Pointer<jlong>)>> SetLongArrayRegion;

  external ffi.Pointer<
      ffi.NativeFunction<
          ffi.Void Function(ffi.Pointer<JNIEnv>, jfloatArray, jsize, jsize,
              ffi.Pointer<jfloat>)>> SetFloatArrayRegion;

  external ffi.Pointer<
      ffi.NativeFunction<
          ffi.Void Function(ffi.Pointer<JNIEnv>, jdoubleArray, jsize, jsize,
              ffi.Pointer<jdouble>)>> SetDoubleArrayRegion;

  external ffi.Pointer<
      ffi.NativeFunction<
          jint Function(ffi.Pointer<JNIEnv>, jclass,
              ffi.Pointer<JNINativeMethod>, jint)>> RegisterNatives;

  external ffi.Pointer<
          ffi.NativeFunction<jint Function(ffi.Pointer<JNIEnv>, jclass)>>
      UnregisterNatives;

  external ffi.Pointer<
          ffi.NativeFunction<jint Function(ffi.Pointer<JNIEnv>, jobject)>>
      MonitorEnter;

  external ffi.Pointer<
          ffi.NativeFunction<jint Function(ffi.Pointer<JNIEnv>, jobject)>>
      MonitorExit;

  external ffi.Pointer<
          ffi.NativeFunction<
              jint Function(
                  ffi.Pointer<JNIEnv>, ffi.Pointer<ffi.Pointer<JavaVM>>)>>
      GetJavaVM;

  external ffi.Pointer<
      ffi.NativeFunction<
          ffi.Void Function(ffi.Pointer<JNIEnv>, jstring, jsize, jsize,
              ffi.Pointer<jchar>)>> GetStringRegion;

  external ffi.Pointer<
      ffi.NativeFunction<
          ffi.Void Function(ffi.Pointer<JNIEnv>, jstring, jsize, jsize,
              ffi.Pointer<ffi.Char>)>> GetStringUTFRegion;

  external ffi.Pointer<
          ffi.NativeFunction<
              ffi.Pointer<ffi.Void> Function(
                  ffi.Pointer<JNIEnv>, jarray, ffi.Pointer<jboolean>)>>
      GetPrimitiveArrayCritical;

  external ffi.Pointer<
          ffi.NativeFunction<
              ffi.Void Function(
                  ffi.Pointer<JNIEnv>, jarray, ffi.Pointer<ffi.Void>, jint)>>
      ReleasePrimitiveArrayCritical;

  external ffi.Pointer<
          ffi.NativeFunction<
              ffi.Pointer<jchar> Function(
                  ffi.Pointer<JNIEnv>, jstring, ffi.Pointer<jboolean>)>>
      GetStringCritical;

  external ffi.Pointer<
          ffi.NativeFunction<
              ffi.Void Function(
                  ffi.Pointer<JNIEnv>, jstring, ffi.Pointer<jchar>)>>
      ReleaseStringCritical;

  external ffi.Pointer<
          ffi.NativeFunction<jweak Function(ffi.Pointer<JNIEnv>, jobject)>>
      NewWeakGlobalRef;

  external ffi.Pointer<
          ffi.NativeFunction<ffi.Void Function(ffi.Pointer<JNIEnv>, jweak)>>
      DeleteWeakGlobalRef;

  external ffi
          .Pointer<ffi.NativeFunction<jboolean Function(ffi.Pointer<JNIEnv>)>>
      ExceptionCheck;

  external ffi.Pointer<
          ffi.NativeFunction<
              jobject Function(
                  ffi.Pointer<JNIEnv>, ffi.Pointer<ffi.Void>, jlong)>>
      NewDirectByteBuffer;

  external ffi.Pointer<
          ffi.NativeFunction<
              ffi.Pointer<ffi.Void> Function(ffi.Pointer<JNIEnv>, jobject)>>
      GetDirectBufferAddress;

  external ffi.Pointer<
          ffi.NativeFunction<jlong Function(ffi.Pointer<JNIEnv>, jobject)>>
      GetDirectBufferCapacity;

  /// added in JNI 1.6
  external ffi.Pointer<
          ffi.NativeFunction<ffi.Int32 Function(ffi.Pointer<JNIEnv>, jobject)>>
      GetObjectRefType;
}

extension JNINativeInterfaceExtension
    on ffi.Pointer<ffi.Pointer<JNINativeInterface>> {
  @pragma('vm:prefer-inline')
  int Function(ffi.Pointer<JNIEnv>) get GetVersion =>
      value.ref.GetVersion.asFunction();

  @pragma('vm:prefer-inline')
  jclass Function(
      ffi.Pointer<JNIEnv>,
      ffi.Pointer<ffi.Char>,
      jobject,
      ffi.Pointer<jbyte>,
      int) get DefineClass => value.ref.DefineClass.asFunction();

  @pragma('vm:prefer-inline')
  jclass Function(ffi.Pointer<JNIEnv>, ffi.Pointer<ffi.Char>) get FindClass =>
      value.ref.FindClass.asFunction();

  @pragma('vm:prefer-inline')
  jmethodID Function(ffi.Pointer<JNIEnv>, jobject) get FromReflectedMethod =>
      value.ref.FromReflectedMethod.asFunction();

  @pragma('vm:prefer-inline')
  jfieldID Function(ffi.Pointer<JNIEnv>, jobject) get FromReflectedField =>
      value.ref.FromReflectedField.asFunction();

  @pragma('vm:prefer-inline')
  jobject Function(ffi.Pointer<JNIEnv>, jclass, jmethodID, int)
      get ToReflectedMethod => value.ref.ToReflectedMethod.asFunction();

  @pragma('vm:prefer-inline')
  jclass Function(ffi.Pointer<JNIEnv>, jclass) get GetSuperclass =>
      value.ref.GetSuperclass.asFunction();

  @pragma('vm:prefer-inline')
  int Function(ffi.Pointer<JNIEnv>, jclass, jclass) get IsAssignableFrom =>
      value.ref.IsAssignableFrom.asFunction();

  @pragma('vm:prefer-inline')
  jobject Function(ffi.Pointer<JNIEnv>, jclass, jfieldID, int)
      get ToReflectedField => value.ref.ToReflectedField.asFunction();

  @pragma('vm:prefer-inline')
  int Function(ffi.Pointer<JNIEnv>, jthrowable) get Throw =>
      value.ref.Throw.asFunction();

  @pragma('vm:prefer-inline')
  int Function(ffi.Pointer<JNIEnv>, jclass, ffi.Pointer<ffi.Char>)
      get ThrowNew => value.ref.ThrowNew.asFunction();

  @pragma('vm:prefer-inline')
  jthrowable Function(ffi.Pointer<JNIEnv>) get ExceptionOccurred =>
      value.ref.ExceptionOccurred.asFunction();

  @pragma('vm:prefer-inline')
  void Function(ffi.Pointer<JNIEnv>) get ExceptionDescribe =>
      value.ref.ExceptionDescribe.asFunction();

  @pragma('vm:prefer-inline')
  void Function(ffi.Pointer<JNIEnv>) get ExceptionClear =>
      value.ref.ExceptionClear.asFunction();

  @pragma('vm:prefer-inline')
  void Function(ffi.Pointer<JNIEnv>, ffi.Pointer<ffi.Char>) get FatalError =>
      value.ref.FatalError.asFunction();

  @pragma('vm:prefer-inline')
  int Function(ffi.Pointer<JNIEnv>, int) get PushLocalFrame =>
      value.ref.PushLocalFrame.asFunction();

  @pragma('vm:prefer-inline')
  jobject Function(ffi.Pointer<JNIEnv>, jobject) get PopLocalFrame =>
      value.ref.PopLocalFrame.asFunction();

  @pragma('vm:prefer-inline')
  jobject Function(ffi.Pointer<JNIEnv>, jobject) get NewGlobalRef =>
      value.ref.NewGlobalRef.asFunction();

  @pragma('vm:prefer-inline')
  void Function(ffi.Pointer<JNIEnv>, jobject) get DeleteGlobalRef =>
      value.ref.DeleteGlobalRef.asFunction();

  @pragma('vm:prefer-inline')
  void Function(ffi.Pointer<JNIEnv>, jobject) get DeleteLocalRef =>
      value.ref.DeleteLocalRef.asFunction();

  @pragma('vm:prefer-inline')
  int Function(ffi.Pointer<JNIEnv>, jobject, jobject) get IsSameObject =>
      value.ref.IsSameObject.asFunction();

  @pragma('vm:prefer-inline')
  jobject Function(ffi.Pointer<JNIEnv>, jobject) get NewLocalRef =>
      value.ref.NewLocalRef.asFunction();

  @pragma('vm:prefer-inline')
  int Function(ffi.Pointer<JNIEnv>, int) get EnsureLocalCapacity =>
      value.ref.EnsureLocalCapacity.asFunction();

  @pragma('vm:prefer-inline')
  jobject Function(ffi.Pointer<JNIEnv>, jclass) get AllocObject =>
      value.ref.AllocObject.asFunction();

  @pragma('vm:prefer-inline')
  jobject Function(ffi.Pointer<JNIEnv>, jclass, jmethodID) get NewObject =>
      value.ref.NewObject.asFunction();

  @pragma('vm:prefer-inline')
  jobject Function(
          ffi.Pointer<JNIEnv>, jclass, jmethodID, ffi.Pointer<__va_list_tag>)
      get NewObjectV => value.ref.NewObjectV.asFunction();

  @pragma('vm:prefer-inline')
  jobject Function(ffi.Pointer<JNIEnv>, jclass, jmethodID, ffi.Pointer<jvalue>)
      get NewObjectA => value.ref.NewObjectA.asFunction();

  @pragma('vm:prefer-inline')
  jclass Function(ffi.Pointer<JNIEnv>, jobject) get GetObjectClass =>
      value.ref.GetObjectClass.asFunction();

  @pragma('vm:prefer-inline')
  int Function(ffi.Pointer<JNIEnv>, jobject, jclass) get IsInstanceOf =>
      value.ref.IsInstanceOf.asFunction();

  @pragma('vm:prefer-inline')
  jmethodID Function(ffi.Pointer<JNIEnv>, jclass, ffi.Pointer<ffi.Char>,
          ffi.Pointer<ffi.Char>)
      get GetMethodID => value.ref.GetMethodID.asFunction();

  @pragma('vm:prefer-inline')
  jobject Function(ffi.Pointer<JNIEnv>, jobject, jmethodID)
      get CallObjectMethod => value.ref.CallObjectMethod.asFunction();

  @pragma('vm:prefer-inline')
  jobject Function(
          ffi.Pointer<JNIEnv>, jobject, jmethodID, ffi.Pointer<__va_list_tag>)
      get CallObjectMethodV => value.ref.CallObjectMethodV.asFunction();

  @pragma('vm:prefer-inline')
  jobject Function(ffi.Pointer<JNIEnv>, jobject, jmethodID, ffi.Pointer<jvalue>)
      get CallObjectMethodA => value.ref.CallObjectMethodA.asFunction();

  @pragma('vm:prefer-inline')
  int Function(ffi.Pointer<JNIEnv>, jobject, jmethodID) get CallBooleanMethod =>
      value.ref.CallBooleanMethod.asFunction();

  @pragma('vm:prefer-inline')
  int Function(
          ffi.Pointer<JNIEnv>, jobject, jmethodID, ffi.Pointer<__va_list_tag>)
      get CallBooleanMethodV => value.ref.CallBooleanMethodV.asFunction();

  @pragma('vm:prefer-inline')
  int Function(ffi.Pointer<JNIEnv>, jobject, jmethodID, ffi.Pointer<jvalue>)
      get CallBooleanMethodA => value.ref.CallBooleanMethodA.asFunction();

  @pragma('vm:prefer-inline')
  int Function(ffi.Pointer<JNIEnv>, jobject, jmethodID) get CallByteMethod =>
      value.ref.CallByteMethod.asFunction();

  @pragma('vm:prefer-inline')
  int Function(
          ffi.Pointer<JNIEnv>, jobject, jmethodID, ffi.Pointer<__va_list_tag>)
      get CallByteMethodV => value.ref.CallByteMethodV.asFunction();

  @pragma('vm:prefer-inline')
  int Function(ffi.Pointer<JNIEnv>, jobject, jmethodID, ffi.Pointer<jvalue>)
      get CallByteMethodA => value.ref.CallByteMethodA.asFunction();

  @pragma('vm:prefer-inline')
  int Function(ffi.Pointer<JNIEnv>, jobject, jmethodID) get CallCharMethod =>
      value.ref.CallCharMethod.asFunction();

  @pragma('vm:prefer-inline')
  int Function(
          ffi.Pointer<JNIEnv>, jobject, jmethodID, ffi.Pointer<__va_list_tag>)
      get CallCharMethodV => value.ref.CallCharMethodV.asFunction();

  @pragma('vm:prefer-inline')
  int Function(ffi.Pointer<JNIEnv>, jobject, jmethodID, ffi.Pointer<jvalue>)
      get CallCharMethodA => value.ref.CallCharMethodA.asFunction();

  @pragma('vm:prefer-inline')
  int Function(ffi.Pointer<JNIEnv>, jobject, jmethodID) get CallShortMethod =>
      value.ref.CallShortMethod.asFunction();

  @pragma('vm:prefer-inline')
  int Function(
          ffi.Pointer<JNIEnv>, jobject, jmethodID, ffi.Pointer<__va_list_tag>)
      get CallShortMethodV => value.ref.CallShortMethodV.asFunction();

  @pragma('vm:prefer-inline')
  int Function(ffi.Pointer<JNIEnv>, jobject, jmethodID, ffi.Pointer<jvalue>)
      get CallShortMethodA => value.ref.CallShortMethodA.asFunction();

  @pragma('vm:prefer-inline')
  int Function(ffi.Pointer<JNIEnv>, jobject, jmethodID) get CallIntMethod =>
      value.ref.CallIntMethod.asFunction();

  @pragma('vm:prefer-inline')
  int Function(
          ffi.Pointer<JNIEnv>, jobject, jmethodID, ffi.Pointer<__va_list_tag>)
      get CallIntMethodV => value.ref.CallIntMethodV.asFunction();

  @pragma('vm:prefer-inline')
  int Function(ffi.Pointer<JNIEnv>, jobject, jmethodID, ffi.Pointer<jvalue>)
      get CallIntMethodA => value.ref.CallIntMethodA.asFunction();

  @pragma('vm:prefer-inline')
  int Function(ffi.Pointer<JNIEnv>, jobject, jmethodID) get CallLongMethod =>
      value.ref.CallLongMethod.asFunction();

  @pragma('vm:prefer-inline')
  int Function(
          ffi.Pointer<JNIEnv>, jobject, jmethodID, ffi.Pointer<__va_list_tag>)
      get CallLongMethodV => value.ref.CallLongMethodV.asFunction();

  @pragma('vm:prefer-inline')
  int Function(ffi.Pointer<JNIEnv>, jobject, jmethodID, ffi.Pointer<jvalue>)
      get CallLongMethodA => value.ref.CallLongMethodA.asFunction();

  @pragma('vm:prefer-inline')
  double Function(ffi.Pointer<JNIEnv>, jobject, jmethodID)
      get CallFloatMethod => value.ref.CallFloatMethod.asFunction();

  @pragma('vm:prefer-inline')
  double Function(
          ffi.Pointer<JNIEnv>, jobject, jmethodID, ffi.Pointer<__va_list_tag>)
      get CallFloatMethodV => value.ref.CallFloatMethodV.asFunction();

  @pragma('vm:prefer-inline')
  double Function(ffi.Pointer<JNIEnv>, jobject, jmethodID, ffi.Pointer<jvalue>)
      get CallFloatMethodA => value.ref.CallFloatMethodA.asFunction();

  @pragma('vm:prefer-inline')
  double Function(ffi.Pointer<JNIEnv>, jobject, jmethodID)
      get CallDoubleMethod => value.ref.CallDoubleMethod.asFunction();

  @pragma('vm:prefer-inline')
  double Function(
          ffi.Pointer<JNIEnv>, jobject, jmethodID, ffi.Pointer<__va_list_tag>)
      get CallDoubleMethodV => value.ref.CallDoubleMethodV.asFunction();

  @pragma('vm:prefer-inline')
  double Function(ffi.Pointer<JNIEnv>, jobject, jmethodID, ffi.Pointer<jvalue>)
      get CallDoubleMethodA => value.ref.CallDoubleMethodA.asFunction();

  @pragma('vm:prefer-inline')
  void Function(ffi.Pointer<JNIEnv>, jobject, jmethodID) get CallVoidMethod =>
      value.ref.CallVoidMethod.asFunction();

  @pragma('vm:prefer-inline')
  void Function(
          ffi.Pointer<JNIEnv>, jobject, jmethodID, ffi.Pointer<__va_list_tag>)
      get CallVoidMethodV => value.ref.CallVoidMethodV.asFunction();

  @pragma('vm:prefer-inline')
  void Function(ffi.Pointer<JNIEnv>, jobject, jmethodID, ffi.Pointer<jvalue>)
      get CallVoidMethodA => value.ref.CallVoidMethodA.asFunction();

  @pragma('vm:prefer-inline')
  jobject Function(ffi.Pointer<JNIEnv>, jobject, jclass, jmethodID)
      get CallNonvirtualObjectMethod =>
          value.ref.CallNonvirtualObjectMethod.asFunction();

  @pragma('vm:prefer-inline')
  jobject Function(ffi.Pointer<JNIEnv>, jobject, jclass, jmethodID,
          ffi.Pointer<__va_list_tag>)
      get CallNonvirtualObjectMethodV =>
          value.ref.CallNonvirtualObjectMethodV.asFunction();

  @pragma('vm:prefer-inline')
  jobject Function(
          ffi.Pointer<JNIEnv>, jobject, jclass, jmethodID, ffi.Pointer<jvalue>)
      get CallNonvirtualObjectMethodA =>
          value.ref.CallNonvirtualObjectMethodA.asFunction();

  @pragma('vm:prefer-inline')
  int Function(ffi.Pointer<JNIEnv>, jobject, jclass, jmethodID)
      get CallNonvirtualBooleanMethod =>
          value.ref.CallNonvirtualBooleanMethod.asFunction();

  @pragma('vm:prefer-inline')
  int Function(ffi.Pointer<JNIEnv>, jobject, jclass, jmethodID,
          ffi.Pointer<__va_list_tag>)
      get CallNonvirtualBooleanMethodV =>
          value.ref.CallNonvirtualBooleanMethodV.asFunction();

  @pragma('vm:prefer-inline')
  int Function(
          ffi.Pointer<JNIEnv>, jobject, jclass, jmethodID, ffi.Pointer<jvalue>)
      get CallNonvirtualBooleanMethodA =>
          value.ref.CallNonvirtualBooleanMethodA.asFunction();

  @pragma('vm:prefer-inline')
  int Function(ffi.Pointer<JNIEnv>, jobject, jclass, jmethodID)
      get CallNonvirtualByteMethod =>
          value.ref.CallNonvirtualByteMethod.asFunction();

  @pragma('vm:prefer-inline')
  int Function(ffi.Pointer<JNIEnv>, jobject, jclass, jmethodID,
          ffi.Pointer<__va_list_tag>)
      get CallNonvirtualByteMethodV =>
          value.ref.CallNonvirtualByteMethodV.asFunction();

  @pragma('vm:prefer-inline')
  int Function(
          ffi.Pointer<JNIEnv>, jobject, jclass, jmethodID, ffi.Pointer<jvalue>)
      get CallNonvirtualByteMethodA =>
          value.ref.CallNonvirtualByteMethodA.asFunction();

  @pragma('vm:prefer-inline')
  int Function(ffi.Pointer<JNIEnv>, jobject, jclass, jmethodID)
      get CallNonvirtualCharMethod =>
          value.ref.CallNonvirtualCharMethod.asFunction();

  @pragma('vm:prefer-inline')
  int Function(ffi.Pointer<JNIEnv>, jobject, jclass, jmethodID,
          ffi.Pointer<__va_list_tag>)
      get CallNonvirtualCharMethodV =>
          value.ref.CallNonvirtualCharMethodV.asFunction();

  @pragma('vm:prefer-inline')
  int Function(
          ffi.Pointer<JNIEnv>, jobject, jclass, jmethodID, ffi.Pointer<jvalue>)
      get CallNonvirtualCharMethodA =>
          value.ref.CallNonvirtualCharMethodA.asFunction();

  @pragma('vm:prefer-inline')
  int Function(ffi.Pointer<JNIEnv>, jobject, jclass, jmethodID)
      get CallNonvirtualShortMethod =>
          value.ref.CallNonvirtualShortMethod.asFunction();

  @pragma('vm:prefer-inline')
  int Function(ffi.Pointer<JNIEnv>, jobject, jclass, jmethodID,
          ffi.Pointer<__va_list_tag>)
      get CallNonvirtualShortMethodV =>
          value.ref.CallNonvirtualShortMethodV.asFunction();

  @pragma('vm:prefer-inline')
  int Function(
          ffi.Pointer<JNIEnv>, jobject, jclass, jmethodID, ffi.Pointer<jvalue>)
      get CallNonvirtualShortMethodA =>
          value.ref.CallNonvirtualShortMethodA.asFunction();

  @pragma('vm:prefer-inline')
  int Function(ffi.Pointer<JNIEnv>, jobject, jclass, jmethodID)
      get CallNonvirtualIntMethod =>
          value.ref.CallNonvirtualIntMethod.asFunction();

  @pragma('vm:prefer-inline')
  int Function(ffi.Pointer<JNIEnv>, jobject, jclass, jmethodID,
          ffi.Pointer<__va_list_tag>)
      get CallNonvirtualIntMethodV =>
          value.ref.CallNonvirtualIntMethodV.asFunction();

  @pragma('vm:prefer-inline')
  int Function(
          ffi.Pointer<JNIEnv>, jobject, jclass, jmethodID, ffi.Pointer<jvalue>)
      get CallNonvirtualIntMethodA =>
          value.ref.CallNonvirtualIntMethodA.asFunction();

  @pragma('vm:prefer-inline')
  int Function(ffi.Pointer<JNIEnv>, jobject, jclass, jmethodID)
      get CallNonvirtualLongMethod =>
          value.ref.CallNonvirtualLongMethod.asFunction();

  @pragma('vm:prefer-inline')
  int Function(ffi.Pointer<JNIEnv>, jobject, jclass, jmethodID,
          ffi.Pointer<__va_list_tag>)
      get CallNonvirtualLongMethodV =>
          value.ref.CallNonvirtualLongMethodV.asFunction();

  @pragma('vm:prefer-inline')
  int Function(
          ffi.Pointer<JNIEnv>, jobject, jclass, jmethodID, ffi.Pointer<jvalue>)
      get CallNonvirtualLongMethodA =>
          value.ref.CallNonvirtualLongMethodA.asFunction();

  @pragma('vm:prefer-inline')
  double Function(ffi.Pointer<JNIEnv>, jobject, jclass, jmethodID)
      get CallNonvirtualFloatMethod =>
          value.ref.CallNonvirtualFloatMethod.asFunction();

  @pragma('vm:prefer-inline')
  double Function(ffi.Pointer<JNIEnv>, jobject, jclass, jmethodID,
          ffi.Pointer<__va_list_tag>)
      get CallNonvirtualFloatMethodV =>
          value.ref.CallNonvirtualFloatMethodV.asFunction();

  @pragma('vm:prefer-inline')
  double Function(
          ffi.Pointer<JNIEnv>, jobject, jclass, jmethodID, ffi.Pointer<jvalue>)
      get CallNonvirtualFloatMethodA =>
          value.ref.CallNonvirtualFloatMethodA.asFunction();

  @pragma('vm:prefer-inline')
  double Function(ffi.Pointer<JNIEnv>, jobject, jclass, jmethodID)
      get CallNonvirtualDoubleMethod =>
          value.ref.CallNonvirtualDoubleMethod.asFunction();

  @pragma('vm:prefer-inline')
  double Function(ffi.Pointer<JNIEnv>, jobject, jclass, jmethodID,
          ffi.Pointer<__va_list_tag>)
      get CallNonvirtualDoubleMethodV =>
          value.ref.CallNonvirtualDoubleMethodV.asFunction();

  @pragma('vm:prefer-inline')
  double Function(
          ffi.Pointer<JNIEnv>, jobject, jclass, jmethodID, ffi.Pointer<jvalue>)
      get CallNonvirtualDoubleMethodA =>
          value.ref.CallNonvirtualDoubleMethodA.asFunction();

  @pragma('vm:prefer-inline')
  void Function(ffi.Pointer<JNIEnv>, jobject, jclass, jmethodID)
      get CallNonvirtualVoidMethod =>
          value.ref.CallNonvirtualVoidMethod.asFunction();

  @pragma('vm:prefer-inline')
  void Function(ffi.Pointer<JNIEnv>, jobject, jclass, jmethodID,
          ffi.Pointer<__va_list_tag>)
      get CallNonvirtualVoidMethodV =>
          value.ref.CallNonvirtualVoidMethodV.asFunction();

  @pragma('vm:prefer-inline')
  void Function(
          ffi.Pointer<JNIEnv>, jobject, jclass, jmethodID, ffi.Pointer<jvalue>)
      get CallNonvirtualVoidMethodA =>
          value.ref.CallNonvirtualVoidMethodA.asFunction();

  @pragma('vm:prefer-inline')
  jfieldID Function(ffi.Pointer<JNIEnv>, jclass, ffi.Pointer<ffi.Char>,
          ffi.Pointer<ffi.Char>)
      get GetFieldID => value.ref.GetFieldID.asFunction();

  @pragma('vm:prefer-inline')
  jobject Function(ffi.Pointer<JNIEnv>, jobject, jfieldID) get GetObjectField =>
      value.ref.GetObjectField.asFunction();

  @pragma('vm:prefer-inline')
  int Function(ffi.Pointer<JNIEnv>, jobject, jfieldID) get GetBooleanField =>
      value.ref.GetBooleanField.asFunction();

  @pragma('vm:prefer-inline')
  int Function(ffi.Pointer<JNIEnv>, jobject, jfieldID) get GetByteField =>
      value.ref.GetByteField.asFunction();

  @pragma('vm:prefer-inline')
  int Function(ffi.Pointer<JNIEnv>, jobject, jfieldID) get GetCharField =>
      value.ref.GetCharField.asFunction();

  @pragma('vm:prefer-inline')
  int Function(ffi.Pointer<JNIEnv>, jobject, jfieldID) get GetShortField =>
      value.ref.GetShortField.asFunction();

  @pragma('vm:prefer-inline')
  int Function(ffi.Pointer<JNIEnv>, jobject, jfieldID) get GetIntField =>
      value.ref.GetIntField.asFunction();

  @pragma('vm:prefer-inline')
  int Function(ffi.Pointer<JNIEnv>, jobject, jfieldID) get GetLongField =>
      value.ref.GetLongField.asFunction();

  @pragma('vm:prefer-inline')
  double Function(ffi.Pointer<JNIEnv>, jobject, jfieldID) get GetFloatField =>
      value.ref.GetFloatField.asFunction();

  @pragma('vm:prefer-inline')
  double Function(ffi.Pointer<JNIEnv>, jobject, jfieldID) get GetDoubleField =>
      value.ref.GetDoubleField.asFunction();

  @pragma('vm:prefer-inline')
  void Function(ffi.Pointer<JNIEnv>, jobject, jfieldID, jobject)
      get SetObjectField => value.ref.SetObjectField.asFunction();

  @pragma('vm:prefer-inline')
  void Function(ffi.Pointer<JNIEnv>, jobject, jfieldID, int)
      get SetBooleanField => value.ref.SetBooleanField.asFunction();

  @pragma('vm:prefer-inline')
  void Function(ffi.Pointer<JNIEnv>, jobject, jfieldID, int) get SetByteField =>
      value.ref.SetByteField.asFunction();

  @pragma('vm:prefer-inline')
  void Function(ffi.Pointer<JNIEnv>, jobject, jfieldID, int) get SetCharField =>
      value.ref.SetCharField.asFunction();

  @pragma('vm:prefer-inline')
  void Function(ffi.Pointer<JNIEnv>, jobject, jfieldID, int)
      get SetShortField => value.ref.SetShortField.asFunction();

  @pragma('vm:prefer-inline')
  void Function(ffi.Pointer<JNIEnv>, jobject, jfieldID, int) get SetIntField =>
      value.ref.SetIntField.asFunction();

  @pragma('vm:prefer-inline')
  void Function(ffi.Pointer<JNIEnv>, jobject, jfieldID, int) get SetLongField =>
      value.ref.SetLongField.asFunction();

  @pragma('vm:prefer-inline')
  void Function(ffi.Pointer<JNIEnv>, jobject, jfieldID, double)
      get SetFloatField => value.ref.SetFloatField.asFunction();

  @pragma('vm:prefer-inline')
  void Function(ffi.Pointer<JNIEnv>, jobject, jfieldID, double)
      get SetDoubleField => value.ref.SetDoubleField.asFunction();

  @pragma('vm:prefer-inline')
  jmethodID Function(ffi.Pointer<JNIEnv>, jclass, ffi.Pointer<ffi.Char>,
          ffi.Pointer<ffi.Char>)
      get GetStaticMethodID => value.ref.GetStaticMethodID.asFunction();

  @pragma('vm:prefer-inline')
  jobject Function(ffi.Pointer<JNIEnv>, jclass, jmethodID)
      get CallStaticObjectMethod =>
          value.ref.CallStaticObjectMethod.asFunction();

  @pragma('vm:prefer-inline')
  jobject Function(
          ffi.Pointer<JNIEnv>, jclass, jmethodID, ffi.Pointer<__va_list_tag>)
      get CallStaticObjectMethodV =>
          value.ref.CallStaticObjectMethodV.asFunction();

  @pragma('vm:prefer-inline')
  jobject Function(ffi.Pointer<JNIEnv>, jclass, jmethodID, ffi.Pointer<jvalue>)
      get CallStaticObjectMethodA =>
          value.ref.CallStaticObjectMethodA.asFunction();

  @pragma('vm:prefer-inline')
  int Function(ffi.Pointer<JNIEnv>, jclass, jmethodID)
      get CallStaticBooleanMethod =>
          value.ref.CallStaticBooleanMethod.asFunction();

  @pragma('vm:prefer-inline')
  int Function(
          ffi.Pointer<JNIEnv>, jclass, jmethodID, ffi.Pointer<__va_list_tag>)
      get CallStaticBooleanMethodV =>
          value.ref.CallStaticBooleanMethodV.asFunction();

  @pragma('vm:prefer-inline')
  int Function(ffi.Pointer<JNIEnv>, jclass, jmethodID, ffi.Pointer<jvalue>)
      get CallStaticBooleanMethodA =>
          value.ref.CallStaticBooleanMethodA.asFunction();

  @pragma('vm:prefer-inline')
  int Function(ffi.Pointer<JNIEnv>, jclass, jmethodID)
      get CallStaticByteMethod => value.ref.CallStaticByteMethod.asFunction();

  @pragma('vm:prefer-inline')
  int Function(
          ffi.Pointer<JNIEnv>, jclass, jmethodID, ffi.Pointer<__va_list_tag>)
      get CallStaticByteMethodV => value.ref.CallStaticByteMethodV.asFunction();

  @pragma('vm:prefer-inline')
  int Function(ffi.Pointer<JNIEnv>, jclass, jmethodID, ffi.Pointer<jvalue>)
      get CallStaticByteMethodA => value.ref.CallStaticByteMethodA.asFunction();

  @pragma('vm:prefer-inline')
  int Function(ffi.Pointer<JNIEnv>, jclass, jmethodID)
      get CallStaticCharMethod => value.ref.CallStaticCharMethod.asFunction();

  @pragma('vm:prefer-inline')
  int Function(
          ffi.Pointer<JNIEnv>, jclass, jmethodID, ffi.Pointer<__va_list_tag>)
      get CallStaticCharMethodV => value.ref.CallStaticCharMethodV.asFunction();

  @pragma('vm:prefer-inline')
  int Function(ffi.Pointer<JNIEnv>, jclass, jmethodID, ffi.Pointer<jvalue>)
      get CallStaticCharMethodA => value.ref.CallStaticCharMethodA.asFunction();

  @pragma('vm:prefer-inline')
  int Function(ffi.Pointer<JNIEnv>, jclass, jmethodID)
      get CallStaticShortMethod => value.ref.CallStaticShortMethod.asFunction();

  @pragma('vm:prefer-inline')
  int Function(
          ffi.Pointer<JNIEnv>, jclass, jmethodID, ffi.Pointer<__va_list_tag>)
      get CallStaticShortMethodV =>
          value.ref.CallStaticShortMethodV.asFunction();

  @pragma('vm:prefer-inline')
  int Function(ffi.Pointer<JNIEnv>, jclass, jmethodID, ffi.Pointer<jvalue>)
      get CallStaticShortMethodA =>
          value.ref.CallStaticShortMethodA.asFunction();

  @pragma('vm:prefer-inline')
  int Function(ffi.Pointer<JNIEnv>, jclass, jmethodID)
      get CallStaticIntMethod => value.ref.CallStaticIntMethod.asFunction();

  @pragma('vm:prefer-inline')
  int Function(
          ffi.Pointer<JNIEnv>, jclass, jmethodID, ffi.Pointer<__va_list_tag>)
      get CallStaticIntMethodV => value.ref.CallStaticIntMethodV.asFunction();

  @pragma('vm:prefer-inline')
  int Function(ffi.Pointer<JNIEnv>, jclass, jmethodID, ffi.Pointer<jvalue>)
      get CallStaticIntMethodA => value.ref.CallStaticIntMethodA.asFunction();

  @pragma('vm:prefer-inline')
  int Function(ffi.Pointer<JNIEnv>, jclass, jmethodID)
      get CallStaticLongMethod => value.ref.CallStaticLongMethod.asFunction();

  @pragma('vm:prefer-inline')
  int Function(
          ffi.Pointer<JNIEnv>, jclass, jmethodID, ffi.Pointer<__va_list_tag>)
      get CallStaticLongMethodV => value.ref.CallStaticLongMethodV.asFunction();

  @pragma('vm:prefer-inline')
  int Function(ffi.Pointer<JNIEnv>, jclass, jmethodID, ffi.Pointer<jvalue>)
      get CallStaticLongMethodA => value.ref.CallStaticLongMethodA.asFunction();

  @pragma('vm:prefer-inline')
  double Function(ffi.Pointer<JNIEnv>, jclass, jmethodID)
      get CallStaticFloatMethod => value.ref.CallStaticFloatMethod.asFunction();

  @pragma('vm:prefer-inline')
  double Function(
          ffi.Pointer<JNIEnv>, jclass, jmethodID, ffi.Pointer<__va_list_tag>)
      get CallStaticFloatMethodV =>
          value.ref.CallStaticFloatMethodV.asFunction();

  @pragma('vm:prefer-inline')
  double Function(ffi.Pointer<JNIEnv>, jclass, jmethodID, ffi.Pointer<jvalue>)
      get CallStaticFloatMethodA =>
          value.ref.CallStaticFloatMethodA.asFunction();

  @pragma('vm:prefer-inline')
  double Function(ffi.Pointer<JNIEnv>, jclass, jmethodID)
      get CallStaticDoubleMethod =>
          value.ref.CallStaticDoubleMethod.asFunction();

  @pragma('vm:prefer-inline')
  double Function(
          ffi.Pointer<JNIEnv>, jclass, jmethodID, ffi.Pointer<__va_list_tag>)
      get CallStaticDoubleMethodV =>
          value.ref.CallStaticDoubleMethodV.asFunction();

  @pragma('vm:prefer-inline')
  double Function(ffi.Pointer<JNIEnv>, jclass, jmethodID, ffi.Pointer<jvalue>)
      get CallStaticDoubleMethodA =>
          value.ref.CallStaticDoubleMethodA.asFunction();

  @pragma('vm:prefer-inline')
  void Function(ffi.Pointer<JNIEnv>, jclass, jmethodID)
      get CallStaticVoidMethod => value.ref.CallStaticVoidMethod.asFunction();

  @pragma('vm:prefer-inline')
  void Function(
          ffi.Pointer<JNIEnv>, jclass, jmethodID, ffi.Pointer<__va_list_tag>)
      get CallStaticVoidMethodV => value.ref.CallStaticVoidMethodV.asFunction();

  @pragma('vm:prefer-inline')
  void Function(ffi.Pointer<JNIEnv>, jclass, jmethodID, ffi.Pointer<jvalue>)
      get CallStaticVoidMethodA => value.ref.CallStaticVoidMethodA.asFunction();

  @pragma('vm:prefer-inline')
  jfieldID Function(ffi.Pointer<JNIEnv>, jclass, ffi.Pointer<ffi.Char>,
          ffi.Pointer<ffi.Char>)
      get GetStaticFieldID => value.ref.GetStaticFieldID.asFunction();

  @pragma('vm:prefer-inline')
  jobject Function(ffi.Pointer<JNIEnv>, jclass, jfieldID)
      get GetStaticObjectField => value.ref.GetStaticObjectField.asFunction();

  @pragma('vm:prefer-inline')
  int Function(ffi.Pointer<JNIEnv>, jclass, jfieldID)
      get GetStaticBooleanField => value.ref.GetStaticBooleanField.asFunction();

  @pragma('vm:prefer-inline')
  int Function(ffi.Pointer<JNIEnv>, jclass, jfieldID) get GetStaticByteField =>
      value.ref.GetStaticByteField.asFunction();

  @pragma('vm:prefer-inline')
  int Function(ffi.Pointer<JNIEnv>, jclass, jfieldID) get GetStaticCharField =>
      value.ref.GetStaticCharField.asFunction();

  @pragma('vm:prefer-inline')
  int Function(ffi.Pointer<JNIEnv>, jclass, jfieldID) get GetStaticShortField =>
      value.ref.GetStaticShortField.asFunction();

  @pragma('vm:prefer-inline')
  int Function(ffi.Pointer<JNIEnv>, jclass, jfieldID) get GetStaticIntField =>
      value.ref.GetStaticIntField.asFunction();

  @pragma('vm:prefer-inline')
  int Function(ffi.Pointer<JNIEnv>, jclass, jfieldID) get GetStaticLongField =>
      value.ref.GetStaticLongField.asFunction();

  @pragma('vm:prefer-inline')
  double Function(ffi.Pointer<JNIEnv>, jclass, jfieldID)
      get GetStaticFloatField => value.ref.GetStaticFloatField.asFunction();

  @pragma('vm:prefer-inline')
  double Function(ffi.Pointer<JNIEnv>, jclass, jfieldID)
      get GetStaticDoubleField => value.ref.GetStaticDoubleField.asFunction();

  @pragma('vm:prefer-inline')
  void Function(ffi.Pointer<JNIEnv>, jclass, jfieldID, jobject)
      get SetStaticObjectField => value.ref.SetStaticObjectField.asFunction();

  @pragma('vm:prefer-inline')
  void Function(ffi.Pointer<JNIEnv>, jclass, jfieldID, int)
      get SetStaticBooleanField => value.ref.SetStaticBooleanField.asFunction();

  @pragma('vm:prefer-inline')
  void Function(ffi.Pointer<JNIEnv>, jclass, jfieldID, int)
      get SetStaticByteField => value.ref.SetStaticByteField.asFunction();

  @pragma('vm:prefer-inline')
  void Function(ffi.Pointer<JNIEnv>, jclass, jfieldID, int)
      get SetStaticCharField => value.ref.SetStaticCharField.asFunction();

  @pragma('vm:prefer-inline')
  void Function(ffi.Pointer<JNIEnv>, jclass, jfieldID, int)
      get SetStaticShortField => value.ref.SetStaticShortField.asFunction();

  @pragma('vm:prefer-inline')
  void Function(ffi.Pointer<JNIEnv>, jclass, jfieldID, int)
      get SetStaticIntField => value.ref.SetStaticIntField.asFunction();

  @pragma('vm:prefer-inline')
  void Function(ffi.Pointer<JNIEnv>, jclass, jfieldID, int)
      get SetStaticLongField => value.ref.SetStaticLongField.asFunction();

  @pragma('vm:prefer-inline')
  void Function(ffi.Pointer<JNIEnv>, jclass, jfieldID, double)
      get SetStaticFloatField => value.ref.SetStaticFloatField.asFunction();

  @pragma('vm:prefer-inline')
  void Function(ffi.Pointer<JNIEnv>, jclass, jfieldID, double)
      get SetStaticDoubleField => value.ref.SetStaticDoubleField.asFunction();

  @pragma('vm:prefer-inline')
  jstring Function(ffi.Pointer<JNIEnv>, ffi.Pointer<jchar>, int)
      get NewString => value.ref.NewString.asFunction();

  @pragma('vm:prefer-inline')
  int Function(ffi.Pointer<JNIEnv>, jstring) get GetStringLength =>
      value.ref.GetStringLength.asFunction();

  @pragma('vm:prefer-inline')
  ffi.Pointer<jchar> Function(
          ffi.Pointer<JNIEnv>, jstring, ffi.Pointer<jboolean>)
      get GetStringChars => value.ref.GetStringChars.asFunction();

  @pragma('vm:prefer-inline')
  void Function(ffi.Pointer<JNIEnv>, jstring, ffi.Pointer<jchar>)
      get ReleaseStringChars => value.ref.ReleaseStringChars.asFunction();

  @pragma('vm:prefer-inline')
  jstring Function(ffi.Pointer<JNIEnv>, ffi.Pointer<ffi.Char>)
      get NewStringUTF => value.ref.NewStringUTF.asFunction();

  @pragma('vm:prefer-inline')
  int Function(ffi.Pointer<JNIEnv>, jstring) get GetStringUTFLength =>
      value.ref.GetStringUTFLength.asFunction();

  @pragma('vm:prefer-inline')
  ffi.Pointer<ffi.Char> Function(
          ffi.Pointer<JNIEnv>, jstring, ffi.Pointer<jboolean>)
      get GetStringUTFChars => value.ref.GetStringUTFChars.asFunction();

  @pragma('vm:prefer-inline')
  void Function(ffi.Pointer<JNIEnv>, jstring, ffi.Pointer<ffi.Char>)
      get ReleaseStringUTFChars => value.ref.ReleaseStringUTFChars.asFunction();

  @pragma('vm:prefer-inline')
  int Function(ffi.Pointer<JNIEnv>, jarray) get GetArrayLength =>
      value.ref.GetArrayLength.asFunction();

  @pragma('vm:prefer-inline')
  jobjectArray Function(ffi.Pointer<JNIEnv>, int, jclass, jobject)
      get NewObjectArray => value.ref.NewObjectArray.asFunction();

  @pragma('vm:prefer-inline')
  jobject Function(ffi.Pointer<JNIEnv>, jobjectArray, int)
      get GetObjectArrayElement => value.ref.GetObjectArrayElement.asFunction();

  @pragma('vm:prefer-inline')
  void Function(ffi.Pointer<JNIEnv>, jobjectArray, int, jobject)
      get SetObjectArrayElement => value.ref.SetObjectArrayElement.asFunction();

  @pragma('vm:prefer-inline')
  jbooleanArray Function(ffi.Pointer<JNIEnv>, int) get NewBooleanArray =>
      value.ref.NewBooleanArray.asFunction();

  @pragma('vm:prefer-inline')
  jbyteArray Function(ffi.Pointer<JNIEnv>, int) get NewByteArray =>
      value.ref.NewByteArray.asFunction();

  @pragma('vm:prefer-inline')
  jcharArray Function(ffi.Pointer<JNIEnv>, int) get NewCharArray =>
      value.ref.NewCharArray.asFunction();

  @pragma('vm:prefer-inline')
  jshortArray Function(ffi.Pointer<JNIEnv>, int) get NewShortArray =>
      value.ref.NewShortArray.asFunction();

  @pragma('vm:prefer-inline')
  jintArray Function(ffi.Pointer<JNIEnv>, int) get NewIntArray =>
      value.ref.NewIntArray.asFunction();

  @pragma('vm:prefer-inline')
  jlongArray Function(ffi.Pointer<JNIEnv>, int) get NewLongArray =>
      value.ref.NewLongArray.asFunction();

  @pragma('vm:prefer-inline')
  jfloatArray Function(ffi.Pointer<JNIEnv>, int) get NewFloatArray =>
      value.ref.NewFloatArray.asFunction();

  @pragma('vm:prefer-inline')
  jdoubleArray Function(ffi.Pointer<JNIEnv>, int) get NewDoubleArray =>
      value.ref.NewDoubleArray.asFunction();

  @pragma('vm:prefer-inline')
  ffi.Pointer<jboolean> Function(
          ffi.Pointer<JNIEnv>, jbooleanArray, ffi.Pointer<jboolean>)
      get GetBooleanArrayElements =>
          value.ref.GetBooleanArrayElements.asFunction();

  @pragma('vm:prefer-inline')
  ffi.Pointer<jbyte> Function(
          ffi.Pointer<JNIEnv>, jbyteArray, ffi.Pointer<jboolean>)
      get GetByteArrayElements => value.ref.GetByteArrayElements.asFunction();

  @pragma('vm:prefer-inline')
  ffi.Pointer<jchar> Function(
          ffi.Pointer<JNIEnv>, jcharArray, ffi.Pointer<jboolean>)
      get GetCharArrayElements => value.ref.GetCharArrayElements.asFunction();

  @pragma('vm:prefer-inline')
  ffi.Pointer<jshort> Function(
          ffi.Pointer<JNIEnv>, jshortArray, ffi.Pointer<jboolean>)
      get GetShortArrayElements => value.ref.GetShortArrayElements.asFunction();

  @pragma('vm:prefer-inline')
  ffi.Pointer<jint> Function(
          ffi.Pointer<JNIEnv>, jintArray, ffi.Pointer<jboolean>)
      get GetIntArrayElements => value.ref.GetIntArrayElements.asFunction();

  @pragma('vm:prefer-inline')
  ffi.Pointer<jlong> Function(
          ffi.Pointer<JNIEnv>, jlongArray, ffi.Pointer<jboolean>)
      get GetLongArrayElements => value.ref.GetLongArrayElements.asFunction();

  @pragma('vm:prefer-inline')
  ffi.Pointer<jfloat> Function(
          ffi.Pointer<JNIEnv>, jfloatArray, ffi.Pointer<jboolean>)
      get GetFloatArrayElements => value.ref.GetFloatArrayElements.asFunction();

  @pragma('vm:prefer-inline')
  ffi.Pointer<jdouble> Function(
          ffi.Pointer<JNIEnv>, jdoubleArray, ffi.Pointer<jboolean>)
      get GetDoubleArrayElements =>
          value.ref.GetDoubleArrayElements.asFunction();

  @pragma('vm:prefer-inline')
  void Function(ffi.Pointer<JNIEnv>, jbooleanArray, ffi.Pointer<jboolean>, int)
      get ReleaseBooleanArrayElements =>
          value.ref.ReleaseBooleanArrayElements.asFunction();

  @pragma('vm:prefer-inline')
  void Function(ffi.Pointer<JNIEnv>, jbyteArray, ffi.Pointer<jbyte>, int)
      get ReleaseByteArrayElements =>
          value.ref.ReleaseByteArrayElements.asFunction();

  @pragma('vm:prefer-inline')
  void Function(ffi.Pointer<JNIEnv>, jcharArray, ffi.Pointer<jchar>, int)
      get ReleaseCharArrayElements =>
          value.ref.ReleaseCharArrayElements.asFunction();

  @pragma('vm:prefer-inline')
  void Function(ffi.Pointer<JNIEnv>, jshortArray, ffi.Pointer<jshort>, int)
      get ReleaseShortArrayElements =>
          value.ref.ReleaseShortArrayElements.asFunction();

  @pragma('vm:prefer-inline')
  void Function(ffi.Pointer<JNIEnv>, jintArray, ffi.Pointer<jint>, int)
      get ReleaseIntArrayElements =>
          value.ref.ReleaseIntArrayElements.asFunction();

  @pragma('vm:prefer-inline')
  void Function(ffi.Pointer<JNIEnv>, jlongArray, ffi.Pointer<jlong>, int)
      get ReleaseLongArrayElements =>
          value.ref.ReleaseLongArrayElements.asFunction();

  @pragma('vm:prefer-inline')
  void Function(ffi.Pointer<JNIEnv>, jfloatArray, ffi.Pointer<jfloat>, int)
      get ReleaseFloatArrayElements =>
          value.ref.ReleaseFloatArrayElements.asFunction();

  @pragma('vm:prefer-inline')
  void Function(ffi.Pointer<JNIEnv>, jdoubleArray, ffi.Pointer<jdouble>, int)
      get ReleaseDoubleArrayElements =>
          value.ref.ReleaseDoubleArrayElements.asFunction();

  @pragma('vm:prefer-inline')
  void Function(
          ffi.Pointer<JNIEnv>, jbooleanArray, int, int, ffi.Pointer<jboolean>)
      get GetBooleanArrayRegion => value.ref.GetBooleanArrayRegion.asFunction();

  @pragma('vm:prefer-inline')
  void Function(ffi.Pointer<JNIEnv>, jbyteArray, int, int, ffi.Pointer<jbyte>)
      get GetByteArrayRegion => value.ref.GetByteArrayRegion.asFunction();

  @pragma('vm:prefer-inline')
  void Function(ffi.Pointer<JNIEnv>, jcharArray, int, int, ffi.Pointer<jchar>)
      get GetCharArrayRegion => value.ref.GetCharArrayRegion.asFunction();

  @pragma('vm:prefer-inline')
  void Function(ffi.Pointer<JNIEnv>, jshortArray, int, int, ffi.Pointer<jshort>)
      get GetShortArrayRegion => value.ref.GetShortArrayRegion.asFunction();

  @pragma('vm:prefer-inline')
  void Function(ffi.Pointer<JNIEnv>, jintArray, int, int, ffi.Pointer<jint>)
      get GetIntArrayRegion => value.ref.GetIntArrayRegion.asFunction();

  @pragma('vm:prefer-inline')
  void Function(ffi.Pointer<JNIEnv>, jlongArray, int, int, ffi.Pointer<jlong>)
      get GetLongArrayRegion => value.ref.GetLongArrayRegion.asFunction();

  @pragma('vm:prefer-inline')
  void Function(ffi.Pointer<JNIEnv>, jfloatArray, int, int, ffi.Pointer<jfloat>)
      get GetFloatArrayRegion => value.ref.GetFloatArrayRegion.asFunction();

  @pragma('vm:prefer-inline')
  void Function(
          ffi.Pointer<JNIEnv>, jdoubleArray, int, int, ffi.Pointer<jdouble>)
      get GetDoubleArrayRegion => value.ref.GetDoubleArrayRegion.asFunction();

  @pragma('vm:prefer-inline')
  void Function(
          ffi.Pointer<JNIEnv>, jbooleanArray, int, int, ffi.Pointer<jboolean>)
      get SetBooleanArrayRegion => value.ref.SetBooleanArrayRegion.asFunction();

  @pragma('vm:prefer-inline')
  void Function(ffi.Pointer<JNIEnv>, jbyteArray, int, int, ffi.Pointer<jbyte>)
      get SetByteArrayRegion => value.ref.SetByteArrayRegion.asFunction();

  @pragma('vm:prefer-inline')
  void Function(ffi.Pointer<JNIEnv>, jcharArray, int, int, ffi.Pointer<jchar>)
      get SetCharArrayRegion => value.ref.SetCharArrayRegion.asFunction();

  @pragma('vm:prefer-inline')
  void Function(ffi.Pointer<JNIEnv>, jshortArray, int, int, ffi.Pointer<jshort>)
      get SetShortArrayRegion => value.ref.SetShortArrayRegion.asFunction();

  @pragma('vm:prefer-inline')
  void Function(ffi.Pointer<JNIEnv>, jintArray, int, int, ffi.Pointer<jint>)
      get SetIntArrayRegion => value.ref.SetIntArrayRegion.asFunction();

  @pragma('vm:prefer-inline')
  void Function(ffi.Pointer<JNIEnv>, jlongArray, int, int, ffi.Pointer<jlong>)
      get SetLongArrayRegion => value.ref.SetLongArrayRegion.asFunction();

  @pragma('vm:prefer-inline')
  void Function(ffi.Pointer<JNIEnv>, jfloatArray, int, int, ffi.Pointer<jfloat>)
      get SetFloatArrayRegion => value.ref.SetFloatArrayRegion.asFunction();

  @pragma('vm:prefer-inline')
  void Function(
          ffi.Pointer<JNIEnv>, jdoubleArray, int, int, ffi.Pointer<jdouble>)
      get SetDoubleArrayRegion => value.ref.SetDoubleArrayRegion.asFunction();

  @pragma('vm:prefer-inline')
  int Function(ffi.Pointer<JNIEnv>, jclass, ffi.Pointer<JNINativeMethod>, int)
      get RegisterNatives => value.ref.RegisterNatives.asFunction();

  @pragma('vm:prefer-inline')
  int Function(ffi.Pointer<JNIEnv>, jclass) get UnregisterNatives =>
      value.ref.UnregisterNatives.asFunction();

  @pragma('vm:prefer-inline')
  int Function(ffi.Pointer<JNIEnv>, jobject) get MonitorEnter =>
      value.ref.MonitorEnter.asFunction();

  @pragma('vm:prefer-inline')
  int Function(ffi.Pointer<JNIEnv>, jobject) get MonitorExit =>
      value.ref.MonitorExit.asFunction();

  @pragma('vm:prefer-inline')
  int Function(ffi.Pointer<JNIEnv>, ffi.Pointer<ffi.Pointer<JavaVM>>)
      get GetJavaVM => value.ref.GetJavaVM.asFunction();

  @pragma('vm:prefer-inline')
  void Function(ffi.Pointer<JNIEnv>, jstring, int, int, ffi.Pointer<jchar>)
      get GetStringRegion => value.ref.GetStringRegion.asFunction();

  @pragma('vm:prefer-inline')
  void Function(ffi.Pointer<JNIEnv>, jstring, int, int, ffi.Pointer<ffi.Char>)
      get GetStringUTFRegion => value.ref.GetStringUTFRegion.asFunction();

  @pragma('vm:prefer-inline')
  ffi.Pointer<ffi.Void> Function(
          ffi.Pointer<JNIEnv>, jarray, ffi.Pointer<jboolean>)
      get GetPrimitiveArrayCritical =>
          value.ref.GetPrimitiveArrayCritical.asFunction();

  @pragma('vm:prefer-inline')
  void Function(ffi.Pointer<JNIEnv>, jarray, ffi.Pointer<ffi.Void>, int)
      get ReleasePrimitiveArrayCritical =>
          value.ref.ReleasePrimitiveArrayCritical.asFunction();

  @pragma('vm:prefer-inline')
  ffi.Pointer<jchar> Function(
          ffi.Pointer<JNIEnv>, jstring, ffi.Pointer<jboolean>)
      get GetStringCritical => value.ref.GetStringCritical.asFunction();

  @pragma('vm:prefer-inline')
  void Function(ffi.Pointer<JNIEnv>, jstring, ffi.Pointer<jchar>)
      get ReleaseStringCritical => value.ref.ReleaseStringCritical.asFunction();

  @pragma('vm:prefer-inline')
  jweak Function(ffi.Pointer<JNIEnv>, jobject) get NewWeakGlobalRef =>
      value.ref.NewWeakGlobalRef.asFunction();

  @pragma('vm:prefer-inline')
  void Function(ffi.Pointer<JNIEnv>, jweak) get DeleteWeakGlobalRef =>
      value.ref.DeleteWeakGlobalRef.asFunction();

  @pragma('vm:prefer-inline')
  int Function(ffi.Pointer<JNIEnv>) get ExceptionCheck =>
      value.ref.ExceptionCheck.asFunction();

  @pragma('vm:prefer-inline')
  jobject Function(ffi.Pointer<JNIEnv>, ffi.Pointer<ffi.Void>, int)
      get NewDirectByteBuffer => value.ref.NewDirectByteBuffer.asFunction();

  @pragma('vm:prefer-inline')
  ffi.Pointer<ffi.Void> Function(ffi.Pointer<JNIEnv>, jobject)
      get GetDirectBufferAddress =>
          value.ref.GetDirectBufferAddress.asFunction();

  @pragma('vm:prefer-inline')
  int Function(ffi.Pointer<JNIEnv>, jobject) get GetDirectBufferCapacity =>
      value.ref.GetDirectBufferCapacity.asFunction();

  @pragma('vm:prefer-inline')
  int Function(ffi.Pointer<JNIEnv>, jobject) get GetObjectRefType =>
      value.ref.GetObjectRefType.asFunction();
}

typedef jclass = jobject;

/// Reference types, in C.
typedef jobject = ffi.Pointer<ffi.Void>;
typedef jbyte = ffi.Int8;

/// "cardinal indices and sizes"
typedef jsize = jint;
typedef jmethodID = ffi.Pointer<_jmethodID>;
typedef jfieldID = ffi.Pointer<_jfieldID>;

/// Primitive types that match up with Java equivalents.
typedef jboolean = ffi.Uint8;
typedef jthrowable = jobject;

class __va_list_tag extends ffi.Struct {
  @ffi.UnsignedInt()
  external int gp_offset;

  @ffi.UnsignedInt()
  external int fp_offset;

  external ffi.Pointer<ffi.Void> overflow_arg_area;

  external ffi.Pointer<ffi.Void> reg_save_area;
}

class jvalue extends ffi.Union {
  @jboolean()
  external int z;

  @jbyte()
  external int b;

  @jchar()
  external int c;

  @jshort()
  external int s;

  @jint()
  external int i;

  @jlong()
  external int j;

  @jfloat()
  external double f;

  @jdouble()
  external double d;

  external jobject l;
}

typedef jchar = ffi.Uint16;
typedef jshort = ffi.Int16;
typedef jlong = ffi.Int64;
typedef jfloat = ffi.Float;
typedef jdouble = ffi.Double;
typedef jstring = jobject;
typedef jarray = jobject;
typedef jobjectArray = jarray;
typedef jbooleanArray = jarray;
typedef jbyteArray = jarray;
typedef jcharArray = jarray;
typedef jshortArray = jarray;
typedef jintArray = jarray;
typedef jlongArray = jarray;
typedef jfloatArray = jarray;
typedef jdoubleArray = jarray;

class JNINativeMethod extends ffi.Struct {
  external ffi.Pointer<ffi.Char> name;

  external ffi.Pointer<ffi.Char> signature;

  external ffi.Pointer<ffi.Void> fnPtr;
}

typedef jweak = jobject;

abstract class jobjectRefType {
  static const int JNIInvalidRefType = 0;
  static const int JNILocalRefType = 1;
  static const int JNIGlobalRefType = 2;
  static const int JNIWeakGlobalRefType = 3;
}

/// C++ object wrapper.
///
/// This is usually overlaid on a C struct whose first element is a
/// JNINativeInterface*.  We rely somewhat on compiler behavior.
class _JNIEnv extends ffi.Struct {
  /// do not rename this; it does not seem to be entirely opaque
  external ffi.Pointer<JNINativeInterface> functions;
}

/// C++ version.
class _JavaVM extends ffi.Struct {
  external ffi.Pointer<JNIInvokeInterface> functions;
}

class JavaVMAttachArgs extends ffi.Struct {
  /// must be >= JNI_VERSION_1_2
  @jint()
  external int version;

  /// NULL or name of thread as modified UTF-8 str
  external ffi.Pointer<ffi.Char> name;

  /// global ref of a ThreadGroup object, or NULL
  external jobject group;
}

/// JNI 1.2+ initialization.  (As of 1.6, the pre-1.2 structures are no
/// longer supported.)
class JavaVMOption extends ffi.Struct {
  external ffi.Pointer<ffi.Char> optionString;

  external ffi.Pointer<ffi.Void> extraInfo;
}

class JavaVMInitArgs extends ffi.Struct {
  /// use JNI_VERSION_1_2 or later
  @jint()
  external int version;

  @jint()
  external int nOptions;

  external ffi.Pointer<JavaVMOption> options;

  @jboolean()
  external int ignoreUnrecognized;
}

const int JNI_FALSE = 0;

const int JNI_TRUE = 1;

const int JNI_VERSION_1_1 = 65537;

const int JNI_VERSION_1_2 = 65538;

const int JNI_VERSION_1_4 = 65540;

const int JNI_VERSION_1_6 = 65542;

const int JNI_OK = 0;

const int JNI_ERR = -1;

const int JNI_EDETACHED = -2;

const int JNI_EVERSION = -3;

const int JNI_ENOMEM = -4;

const int JNI_EEXIST = -5;

const int JNI_EINVAL = -6;

const int JNI_COMMIT = 1;

const int JNI_ABORT = 2;
